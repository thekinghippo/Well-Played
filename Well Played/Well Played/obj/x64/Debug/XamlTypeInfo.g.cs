//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



namespace Well_Played
{
    public partial class App : global::Windows.UI.Xaml.Markup.IXamlMetadataProvider
    {
    private global::Well_Played.Well_Played_XamlTypeInfo.XamlTypeInfoProvider _provider;

        /// <summary>
        /// GetXamlType(Type)
        /// </summary>
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            if(_provider == null)
            {
                _provider = new global::Well_Played.Well_Played_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByType(type);
        }

        /// <summary>
        /// GetXamlType(String)
        /// </summary>
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(string fullName)
        {
            if(_provider == null)
            {
                _provider = new global::Well_Played.Well_Played_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByName(fullName);
        }

        /// <summary>
        /// GetXmlnsDefinitions()
        /// </summary>
        public global::Windows.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return new global::Windows.UI.Xaml.Markup.XmlnsDefinition[0];
        }
    }
}

namespace Well_Played.Well_Played_XamlTypeInfo
{
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlTypeInfoProvider
    {
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByType.TryGetValue(type, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByType(type);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByName(string typeName)
        {
            if (string.IsNullOrEmpty(typeName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByName.TryGetValue(typeName, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByName(typeName);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlMember GetMemberByLongName(string longMemberName)
        {
            if (string.IsNullOrEmpty(longMemberName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlMember xamlMember;
            if (_xamlMembers.TryGetValue(longMemberName, out xamlMember))
            {
                return xamlMember;
            }
            xamlMember = CreateXamlMember(longMemberName);
            if (xamlMember != null)
            {
                _xamlMembers.Add(longMemberName, xamlMember);
            }
            return xamlMember;
        }

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByName = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByType = new global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>
                _xamlMembers = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>();

        string[] _typeNameTable = null;
        global::System.Type[] _typeTable = null;

        private void InitTypeTables()
        {
            _typeNameTable = new string[64];
            _typeNameTable[0] = "Well_Played.Champion";
            _typeNameTable[1] = "Windows.UI.Xaml.Controls.Page";
            _typeNameTable[2] = "Windows.UI.Xaml.Controls.UserControl";
            _typeNameTable[3] = "Well_Played.Champions";
            _typeNameTable[4] = "System.Collections.ObjectModel.ObservableCollection`1<Well_Played.Models.Champion>";
            _typeNameTable[5] = "System.Collections.ObjectModel.Collection`1<Well_Played.Models.Champion>";
            _typeNameTable[6] = "Object";
            _typeNameTable[7] = "Well_Played.Models.Champion";
            _typeNameTable[8] = "System.Collections.Generic.List`1<String>";
            _typeNameTable[9] = "String";
            _typeNameTable[10] = "Int32";
            _typeNameTable[11] = "Well_Played.Models.Image";
            _typeNameTable[12] = "Well_Played.Models.Info";
            _typeNameTable[13] = "Well_Played.Models.Passive";
            _typeNameTable[14] = "System.Collections.Generic.List`1<Well_Played.Models.Recommended>";
            _typeNameTable[15] = "Well_Played.Models.Recommended";
            _typeNameTable[16] = "System.Collections.Generic.List`1<Well_Played.Models.Block>";
            _typeNameTable[17] = "Well_Played.Models.Block";
            _typeNameTable[18] = "System.Collections.Generic.List`1<Well_Played.Models.BlockItem>";
            _typeNameTable[19] = "Well_Played.Models.BlockItem";
            _typeNameTable[20] = "Boolean";
            _typeNameTable[21] = "System.Collections.Generic.List`1<Well_Played.Models.Skin>";
            _typeNameTable[22] = "Well_Played.Models.Skin";
            _typeNameTable[23] = "System.Collections.Generic.List`1<Well_Played.Models.ChampionSpell>";
            _typeNameTable[24] = "Well_Played.Models.ChampionSpell";
            _typeNameTable[25] = "System.Collections.Generic.List`1<Well_Played.Models.Image>";
            _typeNameTable[26] = "System.Collections.Generic.List`1<Double>";
            _typeNameTable[27] = "Double";
            _typeNameTable[28] = "System.Collections.Generic.List`1<Int32>";
            _typeNameTable[29] = "System.Collections.Generic.List`1<Object>";
            _typeNameTable[30] = "Well_Played.Models.LevelTip";
            _typeNameTable[31] = "System.Collections.Generic.List`1<Well_Played.Models.SpellVars>";
            _typeNameTable[32] = "Well_Played.Models.SpellVars";
            _typeNameTable[33] = "Well_Played.Models.RankedStats";
            _typeNameTable[34] = "Well_Played.Models.ChampionList";
            _typeNameTable[35] = "Well_Played.Item";
            _typeNameTable[36] = "System.Collections.ObjectModel.ObservableCollection`1<Well_Played.Models.Item>";
            _typeNameTable[37] = "System.Collections.ObjectModel.Collection`1<Well_Played.Models.Item>";
            _typeNameTable[38] = "Well_Played.Models.Item";
            _typeNameTable[39] = "Well_Played.Models.Gold";
            _typeNameTable[40] = "System.Collections.Generic.Dictionary`2<String, Boolean>";
            _typeNameTable[41] = "Well_Played.Models.MetaData";
            _typeNameTable[42] = "Well_Played.Models.BasicDataStats";
            _typeNameTable[43] = "Well_Played.Items";
            _typeNameTable[44] = "Well_Played.Models.ItemList";
            _typeNameTable[45] = "Well_Played.Maps";
            _typeNameTable[46] = "Well_Played.Shell";
            _typeNameTable[47] = "Well_Played.SignIn";
            _typeNameTable[48] = "Well_Played.Spells";
            _typeNameTable[49] = "System.Collections.ObjectModel.ObservableCollection`1<Well_Played.Models.SummonerSpell>";
            _typeNameTable[50] = "System.Collections.ObjectModel.Collection`1<Well_Played.Models.SummonerSpell>";
            _typeNameTable[51] = "Well_Played.Models.SummonerSpell";
            _typeNameTable[52] = "Well_Played.Models.SpellList";
            _typeNameTable[53] = "Well_Played.Summoner";
            _typeNameTable[54] = "System.Collections.ObjectModel.ObservableCollection`1<Well_Played.Models.Game>";
            _typeNameTable[55] = "System.Collections.ObjectModel.Collection`1<Well_Played.Models.Game>";
            _typeNameTable[56] = "Well_Played.Models.Game";
            _typeNameTable[57] = "Int64";
            _typeNameTable[58] = "System.Collections.Generic.List`1<Well_Played.Models.Player>";
            _typeNameTable[59] = "Well_Played.Models.Player";
            _typeNameTable[60] = "Well_Played.Models.RawStats";
            _typeNameTable[61] = "System.DateTime";
            _typeNameTable[62] = "System.ValueType";
            _typeNameTable[63] = "Well_Played.Models.MatchList";

            _typeTable = new global::System.Type[64];
            _typeTable[0] = typeof(global::Well_Played.Champion);
            _typeTable[1] = typeof(global::Windows.UI.Xaml.Controls.Page);
            _typeTable[2] = typeof(global::Windows.UI.Xaml.Controls.UserControl);
            _typeTable[3] = typeof(global::Well_Played.Champions);
            _typeTable[4] = typeof(global::System.Collections.ObjectModel.ObservableCollection<global::Well_Played.Models.Champion>);
            _typeTable[5] = typeof(global::System.Collections.ObjectModel.Collection<global::Well_Played.Models.Champion>);
            _typeTable[6] = typeof(global::System.Object);
            _typeTable[7] = typeof(global::Well_Played.Models.Champion);
            _typeTable[8] = typeof(global::System.Collections.Generic.List<global::System.String>);
            _typeTable[9] = typeof(global::System.String);
            _typeTable[10] = typeof(global::System.Int32);
            _typeTable[11] = typeof(global::Well_Played.Models.Image);
            _typeTable[12] = typeof(global::Well_Played.Models.Info);
            _typeTable[13] = typeof(global::Well_Played.Models.Passive);
            _typeTable[14] = typeof(global::System.Collections.Generic.List<global::Well_Played.Models.Recommended>);
            _typeTable[15] = typeof(global::Well_Played.Models.Recommended);
            _typeTable[16] = typeof(global::System.Collections.Generic.List<global::Well_Played.Models.Block>);
            _typeTable[17] = typeof(global::Well_Played.Models.Block);
            _typeTable[18] = typeof(global::System.Collections.Generic.List<global::Well_Played.Models.BlockItem>);
            _typeTable[19] = typeof(global::Well_Played.Models.BlockItem);
            _typeTable[20] = typeof(global::System.Boolean);
            _typeTable[21] = typeof(global::System.Collections.Generic.List<global::Well_Played.Models.Skin>);
            _typeTable[22] = typeof(global::Well_Played.Models.Skin);
            _typeTable[23] = typeof(global::System.Collections.Generic.List<global::Well_Played.Models.ChampionSpell>);
            _typeTable[24] = typeof(global::Well_Played.Models.ChampionSpell);
            _typeTable[25] = typeof(global::System.Collections.Generic.List<global::Well_Played.Models.Image>);
            _typeTable[26] = typeof(global::System.Collections.Generic.List<global::System.Double>);
            _typeTable[27] = typeof(global::System.Double);
            _typeTable[28] = typeof(global::System.Collections.Generic.List<global::System.Int32>);
            _typeTable[29] = typeof(global::System.Collections.Generic.List<global::System.Object>);
            _typeTable[30] = typeof(global::Well_Played.Models.LevelTip);
            _typeTable[31] = typeof(global::System.Collections.Generic.List<global::Well_Played.Models.SpellVars>);
            _typeTable[32] = typeof(global::Well_Played.Models.SpellVars);
            _typeTable[33] = typeof(global::Well_Played.Models.RankedStats);
            _typeTable[34] = typeof(global::Well_Played.Models.ChampionList);
            _typeTable[35] = typeof(global::Well_Played.Item);
            _typeTable[36] = typeof(global::System.Collections.ObjectModel.ObservableCollection<global::Well_Played.Models.Item>);
            _typeTable[37] = typeof(global::System.Collections.ObjectModel.Collection<global::Well_Played.Models.Item>);
            _typeTable[38] = typeof(global::Well_Played.Models.Item);
            _typeTable[39] = typeof(global::Well_Played.Models.Gold);
            _typeTable[40] = typeof(global::System.Collections.Generic.Dictionary<global::System.String, global::System.Boolean>);
            _typeTable[41] = typeof(global::Well_Played.Models.MetaData);
            _typeTable[42] = typeof(global::Well_Played.Models.BasicDataStats);
            _typeTable[43] = typeof(global::Well_Played.Items);
            _typeTable[44] = typeof(global::Well_Played.Models.ItemList);
            _typeTable[45] = typeof(global::Well_Played.Maps);
            _typeTable[46] = typeof(global::Well_Played.Shell);
            _typeTable[47] = typeof(global::Well_Played.SignIn);
            _typeTable[48] = typeof(global::Well_Played.Spells);
            _typeTable[49] = typeof(global::System.Collections.ObjectModel.ObservableCollection<global::Well_Played.Models.SummonerSpell>);
            _typeTable[50] = typeof(global::System.Collections.ObjectModel.Collection<global::Well_Played.Models.SummonerSpell>);
            _typeTable[51] = typeof(global::Well_Played.Models.SummonerSpell);
            _typeTable[52] = typeof(global::Well_Played.Models.SpellList);
            _typeTable[53] = typeof(global::Well_Played.Summoner);
            _typeTable[54] = typeof(global::System.Collections.ObjectModel.ObservableCollection<global::Well_Played.Models.Game>);
            _typeTable[55] = typeof(global::System.Collections.ObjectModel.Collection<global::Well_Played.Models.Game>);
            _typeTable[56] = typeof(global::Well_Played.Models.Game);
            _typeTable[57] = typeof(global::System.Int64);
            _typeTable[58] = typeof(global::System.Collections.Generic.List<global::Well_Played.Models.Player>);
            _typeTable[59] = typeof(global::Well_Played.Models.Player);
            _typeTable[60] = typeof(global::Well_Played.Models.RawStats);
            _typeTable[61] = typeof(global::System.DateTime);
            _typeTable[62] = typeof(global::System.ValueType);
            _typeTable[63] = typeof(global::Well_Played.Models.MatchList);
        }

        private int LookupTypeIndexByName(string typeName)
        {
            if (_typeNameTable == null)
            {
                InitTypeTables();
            }
            for (int i=0; i<_typeNameTable.Length; i++)
            {
                if(0 == string.CompareOrdinal(_typeNameTable[i], typeName))
                {
                    return i;
                }
            }
            return -1;
        }

        private int LookupTypeIndexByType(global::System.Type type)
        {
            if (_typeTable == null)
            {
                InitTypeTables();
            }
            for(int i=0; i<_typeTable.Length; i++)
            {
                if(type == _typeTable[i])
                {
                    return i;
                }
            }
            return -1;
        }

        private object Activate_0_Champion() { return new global::Well_Played.Champion(); }
        private object Activate_3_Champions() { return new global::Well_Played.Champions(); }
        private object Activate_4_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::Well_Played.Models.Champion>(); }
        private object Activate_5_Collection() { return new global::System.Collections.ObjectModel.Collection<global::Well_Played.Models.Champion>(); }
        private object Activate_7_Champion() { return new global::Well_Played.Models.Champion(); }
        private object Activate_8_List() { return new global::System.Collections.Generic.List<global::System.String>(); }
        private object Activate_11_Image() { return new global::Well_Played.Models.Image(); }
        private object Activate_12_Info() { return new global::Well_Played.Models.Info(); }
        private object Activate_13_Passive() { return new global::Well_Played.Models.Passive(); }
        private object Activate_14_List() { return new global::System.Collections.Generic.List<global::Well_Played.Models.Recommended>(); }
        private object Activate_15_Recommended() { return new global::Well_Played.Models.Recommended(); }
        private object Activate_16_List() { return new global::System.Collections.Generic.List<global::Well_Played.Models.Block>(); }
        private object Activate_17_Block() { return new global::Well_Played.Models.Block(); }
        private object Activate_18_List() { return new global::System.Collections.Generic.List<global::Well_Played.Models.BlockItem>(); }
        private object Activate_19_BlockItem() { return new global::Well_Played.Models.BlockItem(); }
        private object Activate_21_List() { return new global::System.Collections.Generic.List<global::Well_Played.Models.Skin>(); }
        private object Activate_22_Skin() { return new global::Well_Played.Models.Skin(); }
        private object Activate_23_List() { return new global::System.Collections.Generic.List<global::Well_Played.Models.ChampionSpell>(); }
        private object Activate_24_ChampionSpell() { return new global::Well_Played.Models.ChampionSpell(); }
        private object Activate_25_List() { return new global::System.Collections.Generic.List<global::Well_Played.Models.Image>(); }
        private object Activate_26_List() { return new global::System.Collections.Generic.List<global::System.Double>(); }
        private object Activate_28_List() { return new global::System.Collections.Generic.List<global::System.Int32>(); }
        private object Activate_29_List() { return new global::System.Collections.Generic.List<global::System.Object>(); }
        private object Activate_30_LevelTip() { return new global::Well_Played.Models.LevelTip(); }
        private object Activate_31_List() { return new global::System.Collections.Generic.List<global::Well_Played.Models.SpellVars>(); }
        private object Activate_32_SpellVars() { return new global::Well_Played.Models.SpellVars(); }
        private object Activate_33_RankedStats() { return new global::Well_Played.Models.RankedStats(); }
        private object Activate_34_ChampionList() { return new global::Well_Played.Models.ChampionList(); }
        private object Activate_35_Item() { return new global::Well_Played.Item(); }
        private object Activate_36_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::Well_Played.Models.Item>(); }
        private object Activate_37_Collection() { return new global::System.Collections.ObjectModel.Collection<global::Well_Played.Models.Item>(); }
        private object Activate_38_Item() { return new global::Well_Played.Models.Item(); }
        private object Activate_39_Gold() { return new global::Well_Played.Models.Gold(); }
        private object Activate_40_Dictionary() { return new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Boolean>(); }
        private object Activate_41_MetaData() { return new global::Well_Played.Models.MetaData(); }
        private object Activate_42_BasicDataStats() { return new global::Well_Played.Models.BasicDataStats(); }
        private object Activate_43_Items() { return new global::Well_Played.Items(); }
        private object Activate_44_ItemList() { return new global::Well_Played.Models.ItemList(); }
        private object Activate_45_Maps() { return new global::Well_Played.Maps(); }
        private object Activate_46_Shell() { return new global::Well_Played.Shell(); }
        private object Activate_47_SignIn() { return new global::Well_Played.SignIn(); }
        private object Activate_48_Spells() { return new global::Well_Played.Spells(); }
        private object Activate_49_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::Well_Played.Models.SummonerSpell>(); }
        private object Activate_50_Collection() { return new global::System.Collections.ObjectModel.Collection<global::Well_Played.Models.SummonerSpell>(); }
        private object Activate_51_SummonerSpell() { return new global::Well_Played.Models.SummonerSpell(); }
        private object Activate_52_SpellList() { return new global::Well_Played.Models.SpellList(); }
        private object Activate_53_Summoner() { return new global::Well_Played.Summoner(); }
        private object Activate_54_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::Well_Played.Models.Game>(); }
        private object Activate_55_Collection() { return new global::System.Collections.ObjectModel.Collection<global::Well_Played.Models.Game>(); }
        private object Activate_56_Game() { return new global::Well_Played.Models.Game(); }
        private object Activate_58_List() { return new global::System.Collections.Generic.List<global::Well_Played.Models.Player>(); }
        private object Activate_59_Player() { return new global::Well_Played.Models.Player(); }
        private object Activate_60_RawStats() { return new global::Well_Played.Models.RawStats(); }
        private object Activate_63_MatchList() { return new global::Well_Played.Models.MatchList(); }
        private void VectorAdd_4_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Well_Played.Models.Champion>)instance;
            var newItem = (global::Well_Played.Models.Champion)item;
            collection.Add(newItem);
        }
        private void VectorAdd_5_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Well_Played.Models.Champion>)instance;
            var newItem = (global::Well_Played.Models.Champion)item;
            collection.Add(newItem);
        }
        private void VectorAdd_8_List(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::System.String>)instance;
            var newItem = (global::System.String)item;
            collection.Add(newItem);
        }
        private void VectorAdd_14_List(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Well_Played.Models.Recommended>)instance;
            var newItem = (global::Well_Played.Models.Recommended)item;
            collection.Add(newItem);
        }
        private void VectorAdd_16_List(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Well_Played.Models.Block>)instance;
            var newItem = (global::Well_Played.Models.Block)item;
            collection.Add(newItem);
        }
        private void VectorAdd_18_List(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Well_Played.Models.BlockItem>)instance;
            var newItem = (global::Well_Played.Models.BlockItem)item;
            collection.Add(newItem);
        }
        private void VectorAdd_21_List(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Well_Played.Models.Skin>)instance;
            var newItem = (global::Well_Played.Models.Skin)item;
            collection.Add(newItem);
        }
        private void VectorAdd_23_List(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Well_Played.Models.ChampionSpell>)instance;
            var newItem = (global::Well_Played.Models.ChampionSpell)item;
            collection.Add(newItem);
        }
        private void VectorAdd_25_List(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Well_Played.Models.Image>)instance;
            var newItem = (global::Well_Played.Models.Image)item;
            collection.Add(newItem);
        }
        private void VectorAdd_26_List(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::System.Double>)instance;
            var newItem = (global::System.Double)item;
            collection.Add(newItem);
        }
        private void VectorAdd_28_List(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::System.Int32>)instance;
            var newItem = (global::System.Int32)item;
            collection.Add(newItem);
        }
        private void VectorAdd_29_List(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::System.Object>)instance;
            var newItem = (global::System.Object)item;
            collection.Add(newItem);
        }
        private void VectorAdd_31_List(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Well_Played.Models.SpellVars>)instance;
            var newItem = (global::Well_Played.Models.SpellVars)item;
            collection.Add(newItem);
        }
        private void VectorAdd_36_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Well_Played.Models.Item>)instance;
            var newItem = (global::Well_Played.Models.Item)item;
            collection.Add(newItem);
        }
        private void VectorAdd_37_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Well_Played.Models.Item>)instance;
            var newItem = (global::Well_Played.Models.Item)item;
            collection.Add(newItem);
        }
        private void MapAdd_40_Dictionary(object instance, object key, object item)
        {
            var collection = (global::System.Collections.Generic.IDictionary<global::System.String, global::System.Boolean>)instance;
            var newKey = (global::System.String)key;
            var newItem = (global::System.Boolean)item;
            collection.Add(newKey, newItem);
        }
        private void VectorAdd_49_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Well_Played.Models.SummonerSpell>)instance;
            var newItem = (global::Well_Played.Models.SummonerSpell)item;
            collection.Add(newItem);
        }
        private void VectorAdd_50_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Well_Played.Models.SummonerSpell>)instance;
            var newItem = (global::Well_Played.Models.SummonerSpell)item;
            collection.Add(newItem);
        }
        private void VectorAdd_54_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Well_Played.Models.Game>)instance;
            var newItem = (global::Well_Played.Models.Game)item;
            collection.Add(newItem);
        }
        private void VectorAdd_55_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Well_Played.Models.Game>)instance;
            var newItem = (global::Well_Played.Models.Game)item;
            collection.Add(newItem);
        }
        private void VectorAdd_58_List(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::Well_Played.Models.Player>)instance;
            var newItem = (global::Well_Played.Models.Player)item;
            collection.Add(newItem);
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CreateXamlType(int typeIndex)
        {
            global::Well_Played.Well_Played_XamlTypeInfo.XamlSystemBaseType xamlType = null;
            global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType userType;
            string typeName = _typeNameTable[typeIndex];
            global::System.Type type = _typeTable[typeIndex];

            switch (typeIndex)
            {

            case 0:   //  Well_Played.Champion
                userType = new global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_0_Champion;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 1:   //  Windows.UI.Xaml.Controls.Page
                xamlType = new global::Well_Played.Well_Played_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 2:   //  Windows.UI.Xaml.Controls.UserControl
                xamlType = new global::Well_Played.Well_Played_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 3:   //  Well_Played.Champions
                userType = new global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_3_Champions;
                userType.AddMemberName("LeagueChampions");
                userType.AddMemberName("FullLeagueChampions");
                userType.AddMemberName("ListOfChampions");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 4:   //  System.Collections.ObjectModel.ObservableCollection`1<Well_Played.Models.Champion>
                userType = new global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<Well_Played.Models.Champion>"));
                userType.CollectionAdd = VectorAdd_4_ObservableCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 5:   //  System.Collections.ObjectModel.Collection`1<Well_Played.Models.Champion>
                userType = new global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_5_Collection;
                userType.CollectionAdd = VectorAdd_5_Collection;
                xamlType = userType;
                break;

            case 6:   //  Object
                xamlType = new global::Well_Played.Well_Played_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 7:   //  Well_Played.Models.Champion
                userType = new global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_7_Champion;
                userType.AddMemberName("allytips");
                userType.AddMemberName("blurb");
                userType.AddMemberName("enemytips");
                userType.AddMemberName("id");
                userType.AddMemberName("image");
                userType.AddMemberName("info");
                userType.AddMemberName("key");
                userType.AddMemberName("lore");
                userType.AddMemberName("name");
                userType.AddMemberName("partype");
                userType.AddMemberName("passive");
                userType.AddMemberName("recommended");
                userType.AddMemberName("skins");
                userType.AddMemberName("spells");
                userType.AddMemberName("stats");
                userType.AddMemberName("tags");
                userType.AddMemberName("title");
                userType.AddMemberName("thumbnail");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 8:   //  System.Collections.Generic.List`1<String>
                userType = new global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.CollectionAdd = VectorAdd_8_List;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 9:   //  String
                xamlType = new global::Well_Played.Well_Played_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 10:   //  Int32
                xamlType = new global::Well_Played.Well_Played_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 11:   //  Well_Played.Models.Image
                userType = new global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_11_Image;
                userType.AddMemberName("full");
                userType.AddMemberName("group");
                userType.AddMemberName("h");
                userType.AddMemberName("sprite");
                userType.AddMemberName("w");
                userType.AddMemberName("x");
                userType.AddMemberName("y");
                userType.AddMemberName("url");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 12:   //  Well_Played.Models.Info
                userType = new global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 13:   //  Well_Played.Models.Passive
                userType = new global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 14:   //  System.Collections.Generic.List`1<Well_Played.Models.Recommended>
                userType = new global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.CollectionAdd = VectorAdd_14_List;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 15:   //  Well_Played.Models.Recommended
                userType = new global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_15_Recommended;
                userType.AddMemberName("blocks");
                userType.AddMemberName("champion");
                userType.AddMemberName("map");
                userType.AddMemberName("mode");
                userType.AddMemberName("priority");
                userType.AddMemberName("title");
                userType.AddMemberName("type");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 16:   //  System.Collections.Generic.List`1<Well_Played.Models.Block>
                userType = new global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.CollectionAdd = VectorAdd_16_List;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 17:   //  Well_Played.Models.Block
                userType = new global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_17_Block;
                userType.AddMemberName("items");
                userType.AddMemberName("recMath");
                userType.AddMemberName("type");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 18:   //  System.Collections.Generic.List`1<Well_Played.Models.BlockItem>
                userType = new global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.CollectionAdd = VectorAdd_18_List;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 19:   //  Well_Played.Models.BlockItem
                userType = new global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_19_BlockItem;
                userType.AddMemberName("count");
                userType.AddMemberName("id");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 20:   //  Boolean
                xamlType = new global::Well_Played.Well_Played_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 21:   //  System.Collections.Generic.List`1<Well_Played.Models.Skin>
                userType = new global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.CollectionAdd = VectorAdd_21_List;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 22:   //  Well_Played.Models.Skin
                userType = new global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_22_Skin;
                userType.AddMemberName("id");
                userType.AddMemberName("name");
                userType.AddMemberName("num");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 23:   //  System.Collections.Generic.List`1<Well_Played.Models.ChampionSpell>
                userType = new global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.CollectionAdd = VectorAdd_23_List;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 24:   //  Well_Played.Models.ChampionSpell
                userType = new global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_24_ChampionSpell;
                userType.AddMemberName("altimages");
                userType.AddMemberName("cooldown");
                userType.AddMemberName("cooldownBurn");
                userType.AddMemberName("cost");
                userType.AddMemberName("costBurn");
                userType.AddMemberName("costType");
                userType.AddMemberName("description");
                userType.AddMemberName("effect");
                userType.AddMemberName("effectBurn");
                userType.AddMemberName("image");
                userType.AddMemberName("key");
                userType.AddMemberName("leveltip");
                userType.AddMemberName("maxrank");
                userType.AddMemberName("name");
                userType.AddMemberName("range");
                userType.AddMemberName("rangeBurn");
                userType.AddMemberName("resource");
                userType.AddMemberName("sanitizedDescription");
                userType.AddMemberName("sanitizedTooltip");
                userType.AddMemberName("tooltip");
                userType.AddMemberName("vars");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 25:   //  System.Collections.Generic.List`1<Well_Played.Models.Image>
                userType = new global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.CollectionAdd = VectorAdd_25_List;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 26:   //  System.Collections.Generic.List`1<Double>
                userType = new global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.CollectionAdd = VectorAdd_26_List;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 27:   //  Double
                xamlType = new global::Well_Played.Well_Played_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 28:   //  System.Collections.Generic.List`1<Int32>
                userType = new global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.CollectionAdd = VectorAdd_28_List;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 29:   //  System.Collections.Generic.List`1<Object>
                userType = new global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.CollectionAdd = VectorAdd_29_List;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 30:   //  Well_Played.Models.LevelTip
                userType = new global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 31:   //  System.Collections.Generic.List`1<Well_Played.Models.SpellVars>
                userType = new global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.CollectionAdd = VectorAdd_31_List;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 32:   //  Well_Played.Models.SpellVars
                userType = new global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_32_SpellVars;
                userType.AddMemberName("coeff");
                userType.AddMemberName("dyn");
                userType.AddMemberName("key");
                userType.AddMemberName("link");
                userType.AddMemberName("ranksWith");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 33:   //  Well_Played.Models.RankedStats
                userType = new global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 34:   //  Well_Played.Models.ChampionList
                userType = new global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 35:   //  Well_Played.Item
                userType = new global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_35_Item;
                userType.AddMemberName("buildsInto");
                userType.AddMemberName("buildsFrom");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 36:   //  System.Collections.ObjectModel.ObservableCollection`1<Well_Played.Models.Item>
                userType = new global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<Well_Played.Models.Item>"));
                userType.CollectionAdd = VectorAdd_36_ObservableCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 37:   //  System.Collections.ObjectModel.Collection`1<Well_Played.Models.Item>
                userType = new global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_37_Collection;
                userType.CollectionAdd = VectorAdd_37_Collection;
                xamlType = userType;
                break;

            case 38:   //  Well_Played.Models.Item
                userType = new global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_38_Item;
                userType.AddMemberName("colloq");
                userType.AddMemberName("consumeOnFull");
                userType.AddMemberName("consumed");
                userType.AddMemberName("depth");
                userType.AddMemberName("description");
                userType.AddMemberName("from");
                userType.AddMemberName("gold");
                userType.AddMemberName("group");
                userType.AddMemberName("hideFromAll");
                userType.AddMemberName("id");
                userType.AddMemberName("image");
                userType.AddMemberName("imageURL");
                userType.AddMemberName("inStore");
                userType.AddMemberName("into");
                userType.AddMemberName("maps");
                userType.AddMemberName("name");
                userType.AddMemberName("plaintext");
                userType.AddMemberName("requiredChampion");
                userType.AddMemberName("rune");
                userType.AddMemberName("sanitizedDescription");
                userType.AddMemberName("specialRecipe");
                userType.AddMemberName("stacks");
                userType.AddMemberName("stats");
                userType.AddMemberName("tags");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 39:   //  Well_Played.Models.Gold
                userType = new global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 40:   //  System.Collections.Generic.Dictionary`2<String, Boolean>
                userType = new global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.DictionaryAdd = MapAdd_40_Dictionary;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 41:   //  Well_Played.Models.MetaData
                userType = new global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 42:   //  Well_Played.Models.BasicDataStats
                userType = new global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 43:   //  Well_Played.Items
                userType = new global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_43_Items;
                userType.AddMemberName("LeagueItems");
                userType.AddMemberName("FullLeagueItems");
                userType.AddMemberName("ListOfItems");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 44:   //  Well_Played.Models.ItemList
                userType = new global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 45:   //  Well_Played.Maps
                userType = new global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_45_Maps;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 46:   //  Well_Played.Shell
                userType = new global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_46_Shell;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 47:   //  Well_Played.SignIn
                userType = new global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_47_SignIn;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 48:   //  Well_Played.Spells
                userType = new global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_48_Spells;
                userType.AddMemberName("SummonerSpells");
                userType.AddMemberName("ListOfPartialSpells");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 49:   //  System.Collections.ObjectModel.ObservableCollection`1<Well_Played.Models.SummonerSpell>
                userType = new global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<Well_Played.Models.SummonerSpell>"));
                userType.CollectionAdd = VectorAdd_49_ObservableCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 50:   //  System.Collections.ObjectModel.Collection`1<Well_Played.Models.SummonerSpell>
                userType = new global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_50_Collection;
                userType.CollectionAdd = VectorAdd_50_Collection;
                xamlType = userType;
                break;

            case 51:   //  Well_Played.Models.SummonerSpell
                userType = new global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_51_SummonerSpell;
                userType.AddMemberName("cooldown");
                userType.AddMemberName("cooldownBurn");
                userType.AddMemberName("cost");
                userType.AddMemberName("costBurn");
                userType.AddMemberName("costType");
                userType.AddMemberName("description");
                userType.AddMemberName("effect");
                userType.AddMemberName("effectBurn");
                userType.AddMemberName("id");
                userType.AddMemberName("image");
                userType.AddMemberName("key");
                userType.AddMemberName("leveltip");
                userType.AddMemberName("maxrank");
                userType.AddMemberName("modes");
                userType.AddMemberName("name");
                userType.AddMemberName("range");
                userType.AddMemberName("rangeBurn");
                userType.AddMemberName("resource");
                userType.AddMemberName("sanitizedDescription");
                userType.AddMemberName("sanitizedTooltip");
                userType.AddMemberName("summonerLevel");
                userType.AddMemberName("tooltip");
                userType.AddMemberName("vars");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 52:   //  Well_Played.Models.SpellList
                userType = new global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 53:   //  Well_Played.Summoner
                userType = new global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_53_Summoner;
                userType.AddMemberName("MostPlayedChampions");
                userType.AddMemberName("SummonerMatches");
                userType.AddMemberName("ListOfMatches");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 54:   //  System.Collections.ObjectModel.ObservableCollection`1<Well_Played.Models.Game>
                userType = new global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.Collections.ObjectModel.Collection`1<Well_Played.Models.Game>"));
                userType.CollectionAdd = VectorAdd_54_ObservableCollection;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 55:   //  System.Collections.ObjectModel.Collection`1<Well_Played.Models.Game>
                userType = new global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_55_Collection;
                userType.CollectionAdd = VectorAdd_55_Collection;
                xamlType = userType;
                break;

            case 56:   //  Well_Played.Models.Game
                userType = new global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_56_Game;
                userType.AddMemberName("championId");
                userType.AddMemberName("createDate");
                userType.AddMemberName("fellowPlayers");
                userType.AddMemberName("gameId");
                userType.AddMemberName("gameMode");
                userType.AddMemberName("gameType");
                userType.AddMemberName("invalid");
                userType.AddMemberName("ipEarned");
                userType.AddMemberName("level");
                userType.AddMemberName("mapId");
                userType.AddMemberName("spell1");
                userType.AddMemberName("spell2");
                userType.AddMemberName("stats");
                userType.AddMemberName("subType");
                userType.AddMemberName("teamId");
                userType.AddMemberName("win");
                userType.AddMemberName("color");
                userType.AddMemberName("thumbnail");
                userType.AddMemberName("gameDate");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 57:   //  Int64
                xamlType = new global::Well_Played.Well_Played_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 58:   //  System.Collections.Generic.List`1<Well_Played.Models.Player>
                userType = new global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.CollectionAdd = VectorAdd_58_List;
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 59:   //  Well_Played.Models.Player
                userType = new global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_59_Player;
                userType.AddMemberName("championId");
                userType.AddMemberName("summonerId");
                userType.AddMemberName("teamId");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 60:   //  Well_Played.Models.RawStats
                userType = new global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 61:   //  System.DateTime
                userType = new global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 62:   //  System.ValueType
                userType = new global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 63:   //  Well_Played.Models.MatchList
                userType = new global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                userType.SetIsLocalType();
                xamlType = userType;
                break;
            }
            return xamlType;
        }


        private object get_0_Champions_LeagueChampions(object instance)
        {
            var that = (global::Well_Played.Champions)instance;
            return that.LeagueChampions;
        }
        private void set_0_Champions_LeagueChampions(object instance, object Value)
        {
            var that = (global::Well_Played.Champions)instance;
            that.LeagueChampions = (global::System.Collections.ObjectModel.ObservableCollection<global::Well_Played.Models.Champion>)Value;
        }
        private object get_1_Champion_allytips(object instance)
        {
            var that = (global::Well_Played.Models.Champion)instance;
            return that.allytips;
        }
        private void set_1_Champion_allytips(object instance, object Value)
        {
            var that = (global::Well_Played.Models.Champion)instance;
            that.allytips = (global::System.Collections.Generic.List<global::System.String>)Value;
        }
        private object get_2_Champion_blurb(object instance)
        {
            var that = (global::Well_Played.Models.Champion)instance;
            return that.blurb;
        }
        private void set_2_Champion_blurb(object instance, object Value)
        {
            var that = (global::Well_Played.Models.Champion)instance;
            that.blurb = (global::System.String)Value;
        }
        private object get_3_Champion_enemytips(object instance)
        {
            var that = (global::Well_Played.Models.Champion)instance;
            return that.enemytips;
        }
        private void set_3_Champion_enemytips(object instance, object Value)
        {
            var that = (global::Well_Played.Models.Champion)instance;
            that.enemytips = (global::System.Collections.Generic.List<global::System.String>)Value;
        }
        private object get_4_Champion_id(object instance)
        {
            var that = (global::Well_Played.Models.Champion)instance;
            return that.id;
        }
        private void set_4_Champion_id(object instance, object Value)
        {
            var that = (global::Well_Played.Models.Champion)instance;
            that.id = (global::System.Int32)Value;
        }
        private object get_5_Champion_image(object instance)
        {
            var that = (global::Well_Played.Models.Champion)instance;
            return that.image;
        }
        private void set_5_Champion_image(object instance, object Value)
        {
            var that = (global::Well_Played.Models.Champion)instance;
            that.image = (global::Well_Played.Models.Image)Value;
        }
        private object get_6_Champion_info(object instance)
        {
            var that = (global::Well_Played.Models.Champion)instance;
            return that.info;
        }
        private void set_6_Champion_info(object instance, object Value)
        {
            var that = (global::Well_Played.Models.Champion)instance;
            that.info = (global::Well_Played.Models.Info)Value;
        }
        private object get_7_Champion_key(object instance)
        {
            var that = (global::Well_Played.Models.Champion)instance;
            return that.key;
        }
        private void set_7_Champion_key(object instance, object Value)
        {
            var that = (global::Well_Played.Models.Champion)instance;
            that.key = (global::System.String)Value;
        }
        private object get_8_Champion_lore(object instance)
        {
            var that = (global::Well_Played.Models.Champion)instance;
            return that.lore;
        }
        private void set_8_Champion_lore(object instance, object Value)
        {
            var that = (global::Well_Played.Models.Champion)instance;
            that.lore = (global::System.String)Value;
        }
        private object get_9_Champion_name(object instance)
        {
            var that = (global::Well_Played.Models.Champion)instance;
            return that.name;
        }
        private void set_9_Champion_name(object instance, object Value)
        {
            var that = (global::Well_Played.Models.Champion)instance;
            that.name = (global::System.String)Value;
        }
        private object get_10_Champion_partype(object instance)
        {
            var that = (global::Well_Played.Models.Champion)instance;
            return that.partype;
        }
        private void set_10_Champion_partype(object instance, object Value)
        {
            var that = (global::Well_Played.Models.Champion)instance;
            that.partype = (global::System.String)Value;
        }
        private object get_11_Champion_passive(object instance)
        {
            var that = (global::Well_Played.Models.Champion)instance;
            return that.passive;
        }
        private void set_11_Champion_passive(object instance, object Value)
        {
            var that = (global::Well_Played.Models.Champion)instance;
            that.passive = (global::Well_Played.Models.Passive)Value;
        }
        private object get_12_Champion_recommended(object instance)
        {
            var that = (global::Well_Played.Models.Champion)instance;
            return that.recommended;
        }
        private void set_12_Champion_recommended(object instance, object Value)
        {
            var that = (global::Well_Played.Models.Champion)instance;
            that.recommended = (global::System.Collections.Generic.List<global::Well_Played.Models.Recommended>)Value;
        }
        private object get_13_Recommended_blocks(object instance)
        {
            var that = (global::Well_Played.Models.Recommended)instance;
            return that.blocks;
        }
        private void set_13_Recommended_blocks(object instance, object Value)
        {
            var that = (global::Well_Played.Models.Recommended)instance;
            that.blocks = (global::System.Collections.Generic.List<global::Well_Played.Models.Block>)Value;
        }
        private object get_14_Block_items(object instance)
        {
            var that = (global::Well_Played.Models.Block)instance;
            return that.items;
        }
        private void set_14_Block_items(object instance, object Value)
        {
            var that = (global::Well_Played.Models.Block)instance;
            that.items = (global::System.Collections.Generic.List<global::Well_Played.Models.BlockItem>)Value;
        }
        private object get_15_BlockItem_count(object instance)
        {
            var that = (global::Well_Played.Models.BlockItem)instance;
            return that.count;
        }
        private void set_15_BlockItem_count(object instance, object Value)
        {
            var that = (global::Well_Played.Models.BlockItem)instance;
            that.count = (global::System.Int32)Value;
        }
        private object get_16_BlockItem_id(object instance)
        {
            var that = (global::Well_Played.Models.BlockItem)instance;
            return that.id;
        }
        private void set_16_BlockItem_id(object instance, object Value)
        {
            var that = (global::Well_Played.Models.BlockItem)instance;
            that.id = (global::System.Int32)Value;
        }
        private object get_17_Block_recMath(object instance)
        {
            var that = (global::Well_Played.Models.Block)instance;
            return that.recMath;
        }
        private void set_17_Block_recMath(object instance, object Value)
        {
            var that = (global::Well_Played.Models.Block)instance;
            that.recMath = (global::System.Boolean)Value;
        }
        private object get_18_Block_type(object instance)
        {
            var that = (global::Well_Played.Models.Block)instance;
            return that.type;
        }
        private void set_18_Block_type(object instance, object Value)
        {
            var that = (global::Well_Played.Models.Block)instance;
            that.type = (global::System.String)Value;
        }
        private object get_19_Recommended_champion(object instance)
        {
            var that = (global::Well_Played.Models.Recommended)instance;
            return that.champion;
        }
        private void set_19_Recommended_champion(object instance, object Value)
        {
            var that = (global::Well_Played.Models.Recommended)instance;
            that.champion = (global::System.String)Value;
        }
        private object get_20_Recommended_map(object instance)
        {
            var that = (global::Well_Played.Models.Recommended)instance;
            return that.map;
        }
        private void set_20_Recommended_map(object instance, object Value)
        {
            var that = (global::Well_Played.Models.Recommended)instance;
            that.map = (global::System.String)Value;
        }
        private object get_21_Recommended_mode(object instance)
        {
            var that = (global::Well_Played.Models.Recommended)instance;
            return that.mode;
        }
        private void set_21_Recommended_mode(object instance, object Value)
        {
            var that = (global::Well_Played.Models.Recommended)instance;
            that.mode = (global::System.String)Value;
        }
        private object get_22_Recommended_priority(object instance)
        {
            var that = (global::Well_Played.Models.Recommended)instance;
            return that.priority;
        }
        private void set_22_Recommended_priority(object instance, object Value)
        {
            var that = (global::Well_Played.Models.Recommended)instance;
            that.priority = (global::System.Boolean)Value;
        }
        private object get_23_Recommended_title(object instance)
        {
            var that = (global::Well_Played.Models.Recommended)instance;
            return that.title;
        }
        private void set_23_Recommended_title(object instance, object Value)
        {
            var that = (global::Well_Played.Models.Recommended)instance;
            that.title = (global::System.String)Value;
        }
        private object get_24_Recommended_type(object instance)
        {
            var that = (global::Well_Played.Models.Recommended)instance;
            return that.type;
        }
        private void set_24_Recommended_type(object instance, object Value)
        {
            var that = (global::Well_Played.Models.Recommended)instance;
            that.type = (global::System.String)Value;
        }
        private object get_25_Champion_skins(object instance)
        {
            var that = (global::Well_Played.Models.Champion)instance;
            return that.skins;
        }
        private void set_25_Champion_skins(object instance, object Value)
        {
            var that = (global::Well_Played.Models.Champion)instance;
            that.skins = (global::System.Collections.Generic.List<global::Well_Played.Models.Skin>)Value;
        }
        private object get_26_Skin_id(object instance)
        {
            var that = (global::Well_Played.Models.Skin)instance;
            return that.id;
        }
        private void set_26_Skin_id(object instance, object Value)
        {
            var that = (global::Well_Played.Models.Skin)instance;
            that.id = (global::System.Int32)Value;
        }
        private object get_27_Skin_name(object instance)
        {
            var that = (global::Well_Played.Models.Skin)instance;
            return that.name;
        }
        private void set_27_Skin_name(object instance, object Value)
        {
            var that = (global::Well_Played.Models.Skin)instance;
            that.name = (global::System.String)Value;
        }
        private object get_28_Skin_num(object instance)
        {
            var that = (global::Well_Played.Models.Skin)instance;
            return that.num;
        }
        private void set_28_Skin_num(object instance, object Value)
        {
            var that = (global::Well_Played.Models.Skin)instance;
            that.num = (global::System.Int32)Value;
        }
        private object get_29_Champion_spells(object instance)
        {
            var that = (global::Well_Played.Models.Champion)instance;
            return that.spells;
        }
        private void set_29_Champion_spells(object instance, object Value)
        {
            var that = (global::Well_Played.Models.Champion)instance;
            that.spells = (global::System.Collections.Generic.List<global::Well_Played.Models.ChampionSpell>)Value;
        }
        private object get_30_ChampionSpell_altimages(object instance)
        {
            var that = (global::Well_Played.Models.ChampionSpell)instance;
            return that.altimages;
        }
        private void set_30_ChampionSpell_altimages(object instance, object Value)
        {
            var that = (global::Well_Played.Models.ChampionSpell)instance;
            that.altimages = (global::System.Collections.Generic.List<global::Well_Played.Models.Image>)Value;
        }
        private object get_31_Image_full(object instance)
        {
            var that = (global::Well_Played.Models.Image)instance;
            return that.full;
        }
        private void set_31_Image_full(object instance, object Value)
        {
            var that = (global::Well_Played.Models.Image)instance;
            that.full = (global::System.String)Value;
        }
        private object get_32_Image_group(object instance)
        {
            var that = (global::Well_Played.Models.Image)instance;
            return that.group;
        }
        private void set_32_Image_group(object instance, object Value)
        {
            var that = (global::Well_Played.Models.Image)instance;
            that.group = (global::System.String)Value;
        }
        private object get_33_Image_h(object instance)
        {
            var that = (global::Well_Played.Models.Image)instance;
            return that.h;
        }
        private void set_33_Image_h(object instance, object Value)
        {
            var that = (global::Well_Played.Models.Image)instance;
            that.h = (global::System.Int32)Value;
        }
        private object get_34_Image_sprite(object instance)
        {
            var that = (global::Well_Played.Models.Image)instance;
            return that.sprite;
        }
        private void set_34_Image_sprite(object instance, object Value)
        {
            var that = (global::Well_Played.Models.Image)instance;
            that.sprite = (global::System.String)Value;
        }
        private object get_35_Image_w(object instance)
        {
            var that = (global::Well_Played.Models.Image)instance;
            return that.w;
        }
        private void set_35_Image_w(object instance, object Value)
        {
            var that = (global::Well_Played.Models.Image)instance;
            that.w = (global::System.Int32)Value;
        }
        private object get_36_Image_x(object instance)
        {
            var that = (global::Well_Played.Models.Image)instance;
            return that.x;
        }
        private void set_36_Image_x(object instance, object Value)
        {
            var that = (global::Well_Played.Models.Image)instance;
            that.x = (global::System.Int32)Value;
        }
        private object get_37_Image_y(object instance)
        {
            var that = (global::Well_Played.Models.Image)instance;
            return that.y;
        }
        private void set_37_Image_y(object instance, object Value)
        {
            var that = (global::Well_Played.Models.Image)instance;
            that.y = (global::System.Int32)Value;
        }
        private object get_38_Image_url(object instance)
        {
            var that = (global::Well_Played.Models.Image)instance;
            return that.url;
        }
        private void set_38_Image_url(object instance, object Value)
        {
            var that = (global::Well_Played.Models.Image)instance;
            that.url = (global::System.String)Value;
        }
        private object get_39_ChampionSpell_cooldown(object instance)
        {
            var that = (global::Well_Played.Models.ChampionSpell)instance;
            return that.cooldown;
        }
        private void set_39_ChampionSpell_cooldown(object instance, object Value)
        {
            var that = (global::Well_Played.Models.ChampionSpell)instance;
            that.cooldown = (global::System.Collections.Generic.List<global::System.Double>)Value;
        }
        private object get_40_ChampionSpell_cooldownBurn(object instance)
        {
            var that = (global::Well_Played.Models.ChampionSpell)instance;
            return that.cooldownBurn;
        }
        private void set_40_ChampionSpell_cooldownBurn(object instance, object Value)
        {
            var that = (global::Well_Played.Models.ChampionSpell)instance;
            that.cooldownBurn = (global::System.String)Value;
        }
        private object get_41_ChampionSpell_cost(object instance)
        {
            var that = (global::Well_Played.Models.ChampionSpell)instance;
            return that.cost;
        }
        private void set_41_ChampionSpell_cost(object instance, object Value)
        {
            var that = (global::Well_Played.Models.ChampionSpell)instance;
            that.cost = (global::System.Collections.Generic.List<global::System.Int32>)Value;
        }
        private object get_42_ChampionSpell_costBurn(object instance)
        {
            var that = (global::Well_Played.Models.ChampionSpell)instance;
            return that.costBurn;
        }
        private void set_42_ChampionSpell_costBurn(object instance, object Value)
        {
            var that = (global::Well_Played.Models.ChampionSpell)instance;
            that.costBurn = (global::System.String)Value;
        }
        private object get_43_ChampionSpell_costType(object instance)
        {
            var that = (global::Well_Played.Models.ChampionSpell)instance;
            return that.costType;
        }
        private void set_43_ChampionSpell_costType(object instance, object Value)
        {
            var that = (global::Well_Played.Models.ChampionSpell)instance;
            that.costType = (global::System.String)Value;
        }
        private object get_44_ChampionSpell_description(object instance)
        {
            var that = (global::Well_Played.Models.ChampionSpell)instance;
            return that.description;
        }
        private void set_44_ChampionSpell_description(object instance, object Value)
        {
            var that = (global::Well_Played.Models.ChampionSpell)instance;
            that.description = (global::System.String)Value;
        }
        private object get_45_ChampionSpell_effect(object instance)
        {
            var that = (global::Well_Played.Models.ChampionSpell)instance;
            return that.effect;
        }
        private void set_45_ChampionSpell_effect(object instance, object Value)
        {
            var that = (global::Well_Played.Models.ChampionSpell)instance;
            that.effect = (global::System.Collections.Generic.List<global::System.Object>)Value;
        }
        private object get_46_ChampionSpell_effectBurn(object instance)
        {
            var that = (global::Well_Played.Models.ChampionSpell)instance;
            return that.effectBurn;
        }
        private void set_46_ChampionSpell_effectBurn(object instance, object Value)
        {
            var that = (global::Well_Played.Models.ChampionSpell)instance;
            that.effectBurn = (global::System.Collections.Generic.List<global::System.String>)Value;
        }
        private object get_47_ChampionSpell_image(object instance)
        {
            var that = (global::Well_Played.Models.ChampionSpell)instance;
            return that.image;
        }
        private void set_47_ChampionSpell_image(object instance, object Value)
        {
            var that = (global::Well_Played.Models.ChampionSpell)instance;
            that.image = (global::Well_Played.Models.Image)Value;
        }
        private object get_48_ChampionSpell_key(object instance)
        {
            var that = (global::Well_Played.Models.ChampionSpell)instance;
            return that.key;
        }
        private void set_48_ChampionSpell_key(object instance, object Value)
        {
            var that = (global::Well_Played.Models.ChampionSpell)instance;
            that.key = (global::System.String)Value;
        }
        private object get_49_ChampionSpell_leveltip(object instance)
        {
            var that = (global::Well_Played.Models.ChampionSpell)instance;
            return that.leveltip;
        }
        private void set_49_ChampionSpell_leveltip(object instance, object Value)
        {
            var that = (global::Well_Played.Models.ChampionSpell)instance;
            that.leveltip = (global::Well_Played.Models.LevelTip)Value;
        }
        private object get_50_ChampionSpell_maxrank(object instance)
        {
            var that = (global::Well_Played.Models.ChampionSpell)instance;
            return that.maxrank;
        }
        private void set_50_ChampionSpell_maxrank(object instance, object Value)
        {
            var that = (global::Well_Played.Models.ChampionSpell)instance;
            that.maxrank = (global::System.Int32)Value;
        }
        private object get_51_ChampionSpell_name(object instance)
        {
            var that = (global::Well_Played.Models.ChampionSpell)instance;
            return that.name;
        }
        private void set_51_ChampionSpell_name(object instance, object Value)
        {
            var that = (global::Well_Played.Models.ChampionSpell)instance;
            that.name = (global::System.String)Value;
        }
        private object get_52_ChampionSpell_range(object instance)
        {
            var that = (global::Well_Played.Models.ChampionSpell)instance;
            return that.range;
        }
        private void set_52_ChampionSpell_range(object instance, object Value)
        {
            var that = (global::Well_Played.Models.ChampionSpell)instance;
            that.range = (global::System.Object)Value;
        }
        private object get_53_ChampionSpell_rangeBurn(object instance)
        {
            var that = (global::Well_Played.Models.ChampionSpell)instance;
            return that.rangeBurn;
        }
        private void set_53_ChampionSpell_rangeBurn(object instance, object Value)
        {
            var that = (global::Well_Played.Models.ChampionSpell)instance;
            that.rangeBurn = (global::System.String)Value;
        }
        private object get_54_ChampionSpell_resource(object instance)
        {
            var that = (global::Well_Played.Models.ChampionSpell)instance;
            return that.resource;
        }
        private void set_54_ChampionSpell_resource(object instance, object Value)
        {
            var that = (global::Well_Played.Models.ChampionSpell)instance;
            that.resource = (global::System.String)Value;
        }
        private object get_55_ChampionSpell_sanitizedDescription(object instance)
        {
            var that = (global::Well_Played.Models.ChampionSpell)instance;
            return that.sanitizedDescription;
        }
        private void set_55_ChampionSpell_sanitizedDescription(object instance, object Value)
        {
            var that = (global::Well_Played.Models.ChampionSpell)instance;
            that.sanitizedDescription = (global::System.String)Value;
        }
        private object get_56_ChampionSpell_sanitizedTooltip(object instance)
        {
            var that = (global::Well_Played.Models.ChampionSpell)instance;
            return that.sanitizedTooltip;
        }
        private void set_56_ChampionSpell_sanitizedTooltip(object instance, object Value)
        {
            var that = (global::Well_Played.Models.ChampionSpell)instance;
            that.sanitizedTooltip = (global::System.String)Value;
        }
        private object get_57_ChampionSpell_tooltip(object instance)
        {
            var that = (global::Well_Played.Models.ChampionSpell)instance;
            return that.tooltip;
        }
        private void set_57_ChampionSpell_tooltip(object instance, object Value)
        {
            var that = (global::Well_Played.Models.ChampionSpell)instance;
            that.tooltip = (global::System.String)Value;
        }
        private object get_58_ChampionSpell_vars(object instance)
        {
            var that = (global::Well_Played.Models.ChampionSpell)instance;
            return that.vars;
        }
        private void set_58_ChampionSpell_vars(object instance, object Value)
        {
            var that = (global::Well_Played.Models.ChampionSpell)instance;
            that.vars = (global::System.Collections.Generic.List<global::Well_Played.Models.SpellVars>)Value;
        }
        private object get_59_SpellVars_coeff(object instance)
        {
            var that = (global::Well_Played.Models.SpellVars)instance;
            return that.coeff;
        }
        private void set_59_SpellVars_coeff(object instance, object Value)
        {
            var that = (global::Well_Played.Models.SpellVars)instance;
            that.coeff = (global::System.Collections.Generic.List<global::System.Double>)Value;
        }
        private object get_60_SpellVars_dyn(object instance)
        {
            var that = (global::Well_Played.Models.SpellVars)instance;
            return that.dyn;
        }
        private void set_60_SpellVars_dyn(object instance, object Value)
        {
            var that = (global::Well_Played.Models.SpellVars)instance;
            that.dyn = (global::System.String)Value;
        }
        private object get_61_SpellVars_key(object instance)
        {
            var that = (global::Well_Played.Models.SpellVars)instance;
            return that.key;
        }
        private void set_61_SpellVars_key(object instance, object Value)
        {
            var that = (global::Well_Played.Models.SpellVars)instance;
            that.key = (global::System.String)Value;
        }
        private object get_62_SpellVars_link(object instance)
        {
            var that = (global::Well_Played.Models.SpellVars)instance;
            return that.link;
        }
        private void set_62_SpellVars_link(object instance, object Value)
        {
            var that = (global::Well_Played.Models.SpellVars)instance;
            that.link = (global::System.String)Value;
        }
        private object get_63_SpellVars_ranksWith(object instance)
        {
            var that = (global::Well_Played.Models.SpellVars)instance;
            return that.ranksWith;
        }
        private void set_63_SpellVars_ranksWith(object instance, object Value)
        {
            var that = (global::Well_Played.Models.SpellVars)instance;
            that.ranksWith = (global::System.String)Value;
        }
        private object get_64_Champion_stats(object instance)
        {
            var that = (global::Well_Played.Models.Champion)instance;
            return that.stats;
        }
        private void set_64_Champion_stats(object instance, object Value)
        {
            var that = (global::Well_Played.Models.Champion)instance;
            that.stats = (global::Well_Played.Models.RankedStats)Value;
        }
        private object get_65_Champion_tags(object instance)
        {
            var that = (global::Well_Played.Models.Champion)instance;
            return that.tags;
        }
        private void set_65_Champion_tags(object instance, object Value)
        {
            var that = (global::Well_Played.Models.Champion)instance;
            that.tags = (global::System.Collections.Generic.List<global::System.String>)Value;
        }
        private object get_66_Champion_title(object instance)
        {
            var that = (global::Well_Played.Models.Champion)instance;
            return that.title;
        }
        private void set_66_Champion_title(object instance, object Value)
        {
            var that = (global::Well_Played.Models.Champion)instance;
            that.title = (global::System.String)Value;
        }
        private object get_67_Champion_thumbnail(object instance)
        {
            var that = (global::Well_Played.Models.Champion)instance;
            return that.thumbnail;
        }
        private void set_67_Champion_thumbnail(object instance, object Value)
        {
            var that = (global::Well_Played.Models.Champion)instance;
            that.thumbnail = (global::System.String)Value;
        }
        private object get_68_Champions_FullLeagueChampions(object instance)
        {
            var that = (global::Well_Played.Champions)instance;
            return that.FullLeagueChampions;
        }
        private void set_68_Champions_FullLeagueChampions(object instance, object Value)
        {
            var that = (global::Well_Played.Champions)instance;
            that.FullLeagueChampions = (global::System.Collections.ObjectModel.ObservableCollection<global::Well_Played.Models.Champion>)Value;
        }
        private object get_69_Champions_ListOfChampions(object instance)
        {
            var that = (global::Well_Played.Champions)instance;
            return that.ListOfChampions;
        }
        private void set_69_Champions_ListOfChampions(object instance, object Value)
        {
            var that = (global::Well_Played.Champions)instance;
            that.ListOfChampions = (global::Well_Played.Models.ChampionList)Value;
        }
        private object get_70_Item_buildsInto(object instance)
        {
            var that = (global::Well_Played.Item)instance;
            return that.buildsInto;
        }
        private void set_70_Item_buildsInto(object instance, object Value)
        {
            var that = (global::Well_Played.Item)instance;
            that.buildsInto = (global::System.Collections.ObjectModel.ObservableCollection<global::Well_Played.Models.Item>)Value;
        }
        private object get_71_Item_colloq(object instance)
        {
            var that = (global::Well_Played.Models.Item)instance;
            return that.colloq;
        }
        private void set_71_Item_colloq(object instance, object Value)
        {
            var that = (global::Well_Played.Models.Item)instance;
            that.colloq = (global::System.String)Value;
        }
        private object get_72_Item_consumeOnFull(object instance)
        {
            var that = (global::Well_Played.Models.Item)instance;
            return that.consumeOnFull;
        }
        private void set_72_Item_consumeOnFull(object instance, object Value)
        {
            var that = (global::Well_Played.Models.Item)instance;
            that.consumeOnFull = (global::System.Boolean)Value;
        }
        private object get_73_Item_consumed(object instance)
        {
            var that = (global::Well_Played.Models.Item)instance;
            return that.consumed;
        }
        private void set_73_Item_consumed(object instance, object Value)
        {
            var that = (global::Well_Played.Models.Item)instance;
            that.consumed = (global::System.Boolean)Value;
        }
        private object get_74_Item_depth(object instance)
        {
            var that = (global::Well_Played.Models.Item)instance;
            return that.depth;
        }
        private void set_74_Item_depth(object instance, object Value)
        {
            var that = (global::Well_Played.Models.Item)instance;
            that.depth = (global::System.Int32)Value;
        }
        private object get_75_Item_description(object instance)
        {
            var that = (global::Well_Played.Models.Item)instance;
            return that.description;
        }
        private void set_75_Item_description(object instance, object Value)
        {
            var that = (global::Well_Played.Models.Item)instance;
            that.description = (global::System.String)Value;
        }
        private object get_76_Item_from(object instance)
        {
            var that = (global::Well_Played.Models.Item)instance;
            return that.from;
        }
        private void set_76_Item_from(object instance, object Value)
        {
            var that = (global::Well_Played.Models.Item)instance;
            that.from = (global::System.Collections.Generic.List<global::System.String>)Value;
        }
        private object get_77_Item_gold(object instance)
        {
            var that = (global::Well_Played.Models.Item)instance;
            return that.gold;
        }
        private void set_77_Item_gold(object instance, object Value)
        {
            var that = (global::Well_Played.Models.Item)instance;
            that.gold = (global::Well_Played.Models.Gold)Value;
        }
        private object get_78_Item_group(object instance)
        {
            var that = (global::Well_Played.Models.Item)instance;
            return that.group;
        }
        private void set_78_Item_group(object instance, object Value)
        {
            var that = (global::Well_Played.Models.Item)instance;
            that.group = (global::System.String)Value;
        }
        private object get_79_Item_hideFromAll(object instance)
        {
            var that = (global::Well_Played.Models.Item)instance;
            return that.hideFromAll;
        }
        private void set_79_Item_hideFromAll(object instance, object Value)
        {
            var that = (global::Well_Played.Models.Item)instance;
            that.hideFromAll = (global::System.Boolean)Value;
        }
        private object get_80_Item_id(object instance)
        {
            var that = (global::Well_Played.Models.Item)instance;
            return that.id;
        }
        private void set_80_Item_id(object instance, object Value)
        {
            var that = (global::Well_Played.Models.Item)instance;
            that.id = (global::System.Int32)Value;
        }
        private object get_81_Item_image(object instance)
        {
            var that = (global::Well_Played.Models.Item)instance;
            return that.image;
        }
        private void set_81_Item_image(object instance, object Value)
        {
            var that = (global::Well_Played.Models.Item)instance;
            that.image = (global::Well_Played.Models.Image)Value;
        }
        private object get_82_Item_imageURL(object instance)
        {
            var that = (global::Well_Played.Models.Item)instance;
            return that.imageURL;
        }
        private void set_82_Item_imageURL(object instance, object Value)
        {
            var that = (global::Well_Played.Models.Item)instance;
            that.imageURL = (global::System.String)Value;
        }
        private object get_83_Item_inStore(object instance)
        {
            var that = (global::Well_Played.Models.Item)instance;
            return that.inStore;
        }
        private void set_83_Item_inStore(object instance, object Value)
        {
            var that = (global::Well_Played.Models.Item)instance;
            that.inStore = (global::System.Boolean)Value;
        }
        private object get_84_Item_into(object instance)
        {
            var that = (global::Well_Played.Models.Item)instance;
            return that.into;
        }
        private void set_84_Item_into(object instance, object Value)
        {
            var that = (global::Well_Played.Models.Item)instance;
            that.into = (global::System.Collections.Generic.List<global::System.String>)Value;
        }
        private object get_85_Item_maps(object instance)
        {
            var that = (global::Well_Played.Models.Item)instance;
            return that.maps;
        }
        private void set_85_Item_maps(object instance, object Value)
        {
            var that = (global::Well_Played.Models.Item)instance;
            that.maps = (global::System.Collections.Generic.Dictionary<global::System.String, global::System.Boolean>)Value;
        }
        private object get_86_Item_name(object instance)
        {
            var that = (global::Well_Played.Models.Item)instance;
            return that.name;
        }
        private void set_86_Item_name(object instance, object Value)
        {
            var that = (global::Well_Played.Models.Item)instance;
            that.name = (global::System.String)Value;
        }
        private object get_87_Item_plaintext(object instance)
        {
            var that = (global::Well_Played.Models.Item)instance;
            return that.plaintext;
        }
        private void set_87_Item_plaintext(object instance, object Value)
        {
            var that = (global::Well_Played.Models.Item)instance;
            that.plaintext = (global::System.String)Value;
        }
        private object get_88_Item_requiredChampion(object instance)
        {
            var that = (global::Well_Played.Models.Item)instance;
            return that.requiredChampion;
        }
        private void set_88_Item_requiredChampion(object instance, object Value)
        {
            var that = (global::Well_Played.Models.Item)instance;
            that.requiredChampion = (global::System.String)Value;
        }
        private object get_89_Item_rune(object instance)
        {
            var that = (global::Well_Played.Models.Item)instance;
            return that.rune;
        }
        private void set_89_Item_rune(object instance, object Value)
        {
            var that = (global::Well_Played.Models.Item)instance;
            that.rune = (global::Well_Played.Models.MetaData)Value;
        }
        private object get_90_Item_sanitizedDescription(object instance)
        {
            var that = (global::Well_Played.Models.Item)instance;
            return that.sanitizedDescription;
        }
        private void set_90_Item_sanitizedDescription(object instance, object Value)
        {
            var that = (global::Well_Played.Models.Item)instance;
            that.sanitizedDescription = (global::System.String)Value;
        }
        private object get_91_Item_specialRecipe(object instance)
        {
            var that = (global::Well_Played.Models.Item)instance;
            return that.specialRecipe;
        }
        private void set_91_Item_specialRecipe(object instance, object Value)
        {
            var that = (global::Well_Played.Models.Item)instance;
            that.specialRecipe = (global::System.Int32)Value;
        }
        private object get_92_Item_stacks(object instance)
        {
            var that = (global::Well_Played.Models.Item)instance;
            return that.stacks;
        }
        private void set_92_Item_stacks(object instance, object Value)
        {
            var that = (global::Well_Played.Models.Item)instance;
            that.stacks = (global::System.Int32)Value;
        }
        private object get_93_Item_stats(object instance)
        {
            var that = (global::Well_Played.Models.Item)instance;
            return that.stats;
        }
        private void set_93_Item_stats(object instance, object Value)
        {
            var that = (global::Well_Played.Models.Item)instance;
            that.stats = (global::Well_Played.Models.BasicDataStats)Value;
        }
        private object get_94_Item_tags(object instance)
        {
            var that = (global::Well_Played.Models.Item)instance;
            return that.tags;
        }
        private void set_94_Item_tags(object instance, object Value)
        {
            var that = (global::Well_Played.Models.Item)instance;
            that.tags = (global::System.Collections.Generic.List<global::System.String>)Value;
        }
        private object get_95_Item_buildsFrom(object instance)
        {
            var that = (global::Well_Played.Item)instance;
            return that.buildsFrom;
        }
        private void set_95_Item_buildsFrom(object instance, object Value)
        {
            var that = (global::Well_Played.Item)instance;
            that.buildsFrom = (global::System.Collections.ObjectModel.ObservableCollection<global::Well_Played.Models.Item>)Value;
        }
        private object get_96_Items_LeagueItems(object instance)
        {
            var that = (global::Well_Played.Items)instance;
            return that.LeagueItems;
        }
        private void set_96_Items_LeagueItems(object instance, object Value)
        {
            var that = (global::Well_Played.Items)instance;
            that.LeagueItems = (global::System.Collections.ObjectModel.ObservableCollection<global::Well_Played.Models.Item>)Value;
        }
        private object get_97_Items_FullLeagueItems(object instance)
        {
            var that = (global::Well_Played.Items)instance;
            return that.FullLeagueItems;
        }
        private void set_97_Items_FullLeagueItems(object instance, object Value)
        {
            var that = (global::Well_Played.Items)instance;
            that.FullLeagueItems = (global::System.Collections.ObjectModel.ObservableCollection<global::Well_Played.Models.Item>)Value;
        }
        private object get_98_Items_ListOfItems(object instance)
        {
            var that = (global::Well_Played.Items)instance;
            return that.ListOfItems;
        }
        private void set_98_Items_ListOfItems(object instance, object Value)
        {
            var that = (global::Well_Played.Items)instance;
            that.ListOfItems = (global::Well_Played.Models.ItemList)Value;
        }
        private object get_99_Spells_SummonerSpells(object instance)
        {
            var that = (global::Well_Played.Spells)instance;
            return that.SummonerSpells;
        }
        private void set_99_Spells_SummonerSpells(object instance, object Value)
        {
            var that = (global::Well_Played.Spells)instance;
            that.SummonerSpells = (global::System.Collections.ObjectModel.ObservableCollection<global::Well_Played.Models.SummonerSpell>)Value;
        }
        private object get_100_SummonerSpell_cooldown(object instance)
        {
            var that = (global::Well_Played.Models.SummonerSpell)instance;
            return that.cooldown;
        }
        private void set_100_SummonerSpell_cooldown(object instance, object Value)
        {
            var that = (global::Well_Played.Models.SummonerSpell)instance;
            that.cooldown = (global::System.Collections.Generic.List<global::System.Double>)Value;
        }
        private object get_101_SummonerSpell_cooldownBurn(object instance)
        {
            var that = (global::Well_Played.Models.SummonerSpell)instance;
            return that.cooldownBurn;
        }
        private void set_101_SummonerSpell_cooldownBurn(object instance, object Value)
        {
            var that = (global::Well_Played.Models.SummonerSpell)instance;
            that.cooldownBurn = (global::System.String)Value;
        }
        private object get_102_SummonerSpell_cost(object instance)
        {
            var that = (global::Well_Played.Models.SummonerSpell)instance;
            return that.cost;
        }
        private void set_102_SummonerSpell_cost(object instance, object Value)
        {
            var that = (global::Well_Played.Models.SummonerSpell)instance;
            that.cost = (global::System.Collections.Generic.List<global::System.Int32>)Value;
        }
        private object get_103_SummonerSpell_costBurn(object instance)
        {
            var that = (global::Well_Played.Models.SummonerSpell)instance;
            return that.costBurn;
        }
        private void set_103_SummonerSpell_costBurn(object instance, object Value)
        {
            var that = (global::Well_Played.Models.SummonerSpell)instance;
            that.costBurn = (global::System.String)Value;
        }
        private object get_104_SummonerSpell_costType(object instance)
        {
            var that = (global::Well_Played.Models.SummonerSpell)instance;
            return that.costType;
        }
        private void set_104_SummonerSpell_costType(object instance, object Value)
        {
            var that = (global::Well_Played.Models.SummonerSpell)instance;
            that.costType = (global::System.String)Value;
        }
        private object get_105_SummonerSpell_description(object instance)
        {
            var that = (global::Well_Played.Models.SummonerSpell)instance;
            return that.description;
        }
        private void set_105_SummonerSpell_description(object instance, object Value)
        {
            var that = (global::Well_Played.Models.SummonerSpell)instance;
            that.description = (global::System.String)Value;
        }
        private object get_106_SummonerSpell_effect(object instance)
        {
            var that = (global::Well_Played.Models.SummonerSpell)instance;
            return that.effect;
        }
        private void set_106_SummonerSpell_effect(object instance, object Value)
        {
            var that = (global::Well_Played.Models.SummonerSpell)instance;
            that.effect = (global::System.Collections.Generic.List<global::System.Object>)Value;
        }
        private object get_107_SummonerSpell_effectBurn(object instance)
        {
            var that = (global::Well_Played.Models.SummonerSpell)instance;
            return that.effectBurn;
        }
        private void set_107_SummonerSpell_effectBurn(object instance, object Value)
        {
            var that = (global::Well_Played.Models.SummonerSpell)instance;
            that.effectBurn = (global::System.Collections.Generic.List<global::System.String>)Value;
        }
        private object get_108_SummonerSpell_id(object instance)
        {
            var that = (global::Well_Played.Models.SummonerSpell)instance;
            return that.id;
        }
        private void set_108_SummonerSpell_id(object instance, object Value)
        {
            var that = (global::Well_Played.Models.SummonerSpell)instance;
            that.id = (global::System.Int32)Value;
        }
        private object get_109_SummonerSpell_image(object instance)
        {
            var that = (global::Well_Played.Models.SummonerSpell)instance;
            return that.image;
        }
        private void set_109_SummonerSpell_image(object instance, object Value)
        {
            var that = (global::Well_Played.Models.SummonerSpell)instance;
            that.image = (global::Well_Played.Models.Image)Value;
        }
        private object get_110_SummonerSpell_key(object instance)
        {
            var that = (global::Well_Played.Models.SummonerSpell)instance;
            return that.key;
        }
        private void set_110_SummonerSpell_key(object instance, object Value)
        {
            var that = (global::Well_Played.Models.SummonerSpell)instance;
            that.key = (global::System.String)Value;
        }
        private object get_111_SummonerSpell_leveltip(object instance)
        {
            var that = (global::Well_Played.Models.SummonerSpell)instance;
            return that.leveltip;
        }
        private void set_111_SummonerSpell_leveltip(object instance, object Value)
        {
            var that = (global::Well_Played.Models.SummonerSpell)instance;
            that.leveltip = (global::Well_Played.Models.LevelTip)Value;
        }
        private object get_112_SummonerSpell_maxrank(object instance)
        {
            var that = (global::Well_Played.Models.SummonerSpell)instance;
            return that.maxrank;
        }
        private void set_112_SummonerSpell_maxrank(object instance, object Value)
        {
            var that = (global::Well_Played.Models.SummonerSpell)instance;
            that.maxrank = (global::System.Int32)Value;
        }
        private object get_113_SummonerSpell_modes(object instance)
        {
            var that = (global::Well_Played.Models.SummonerSpell)instance;
            return that.modes;
        }
        private void set_113_SummonerSpell_modes(object instance, object Value)
        {
            var that = (global::Well_Played.Models.SummonerSpell)instance;
            that.modes = (global::System.Collections.Generic.List<global::System.String>)Value;
        }
        private object get_114_SummonerSpell_name(object instance)
        {
            var that = (global::Well_Played.Models.SummonerSpell)instance;
            return that.name;
        }
        private void set_114_SummonerSpell_name(object instance, object Value)
        {
            var that = (global::Well_Played.Models.SummonerSpell)instance;
            that.name = (global::System.String)Value;
        }
        private object get_115_SummonerSpell_range(object instance)
        {
            var that = (global::Well_Played.Models.SummonerSpell)instance;
            return that.range;
        }
        private void set_115_SummonerSpell_range(object instance, object Value)
        {
            var that = (global::Well_Played.Models.SummonerSpell)instance;
            that.range = (global::System.Object)Value;
        }
        private object get_116_SummonerSpell_rangeBurn(object instance)
        {
            var that = (global::Well_Played.Models.SummonerSpell)instance;
            return that.rangeBurn;
        }
        private void set_116_SummonerSpell_rangeBurn(object instance, object Value)
        {
            var that = (global::Well_Played.Models.SummonerSpell)instance;
            that.rangeBurn = (global::System.String)Value;
        }
        private object get_117_SummonerSpell_resource(object instance)
        {
            var that = (global::Well_Played.Models.SummonerSpell)instance;
            return that.resource;
        }
        private void set_117_SummonerSpell_resource(object instance, object Value)
        {
            var that = (global::Well_Played.Models.SummonerSpell)instance;
            that.resource = (global::System.String)Value;
        }
        private object get_118_SummonerSpell_sanitizedDescription(object instance)
        {
            var that = (global::Well_Played.Models.SummonerSpell)instance;
            return that.sanitizedDescription;
        }
        private void set_118_SummonerSpell_sanitizedDescription(object instance, object Value)
        {
            var that = (global::Well_Played.Models.SummonerSpell)instance;
            that.sanitizedDescription = (global::System.String)Value;
        }
        private object get_119_SummonerSpell_sanitizedTooltip(object instance)
        {
            var that = (global::Well_Played.Models.SummonerSpell)instance;
            return that.sanitizedTooltip;
        }
        private void set_119_SummonerSpell_sanitizedTooltip(object instance, object Value)
        {
            var that = (global::Well_Played.Models.SummonerSpell)instance;
            that.sanitizedTooltip = (global::System.String)Value;
        }
        private object get_120_SummonerSpell_summonerLevel(object instance)
        {
            var that = (global::Well_Played.Models.SummonerSpell)instance;
            return that.summonerLevel;
        }
        private void set_120_SummonerSpell_summonerLevel(object instance, object Value)
        {
            var that = (global::Well_Played.Models.SummonerSpell)instance;
            that.summonerLevel = (global::System.Int32)Value;
        }
        private object get_121_SummonerSpell_tooltip(object instance)
        {
            var that = (global::Well_Played.Models.SummonerSpell)instance;
            return that.tooltip;
        }
        private void set_121_SummonerSpell_tooltip(object instance, object Value)
        {
            var that = (global::Well_Played.Models.SummonerSpell)instance;
            that.tooltip = (global::System.String)Value;
        }
        private object get_122_SummonerSpell_vars(object instance)
        {
            var that = (global::Well_Played.Models.SummonerSpell)instance;
            return that.vars;
        }
        private void set_122_SummonerSpell_vars(object instance, object Value)
        {
            var that = (global::Well_Played.Models.SummonerSpell)instance;
            that.vars = (global::System.Collections.Generic.List<global::Well_Played.Models.SpellVars>)Value;
        }
        private object get_123_Spells_ListOfPartialSpells(object instance)
        {
            var that = (global::Well_Played.Spells)instance;
            return that.ListOfPartialSpells;
        }
        private void set_123_Spells_ListOfPartialSpells(object instance, object Value)
        {
            var that = (global::Well_Played.Spells)instance;
            that.ListOfPartialSpells = (global::Well_Played.Models.SpellList)Value;
        }
        private object get_124_Summoner_MostPlayedChampions(object instance)
        {
            var that = (global::Well_Played.Summoner)instance;
            return that.MostPlayedChampions;
        }
        private void set_124_Summoner_MostPlayedChampions(object instance, object Value)
        {
            var that = (global::Well_Played.Summoner)instance;
            that.MostPlayedChampions = (global::System.Collections.ObjectModel.ObservableCollection<global::Well_Played.Models.Champion>)Value;
        }
        private object get_125_Summoner_SummonerMatches(object instance)
        {
            var that = (global::Well_Played.Summoner)instance;
            return that.SummonerMatches;
        }
        private void set_125_Summoner_SummonerMatches(object instance, object Value)
        {
            var that = (global::Well_Played.Summoner)instance;
            that.SummonerMatches = (global::System.Collections.ObjectModel.ObservableCollection<global::Well_Played.Models.Game>)Value;
        }
        private object get_126_Game_championId(object instance)
        {
            var that = (global::Well_Played.Models.Game)instance;
            return that.championId;
        }
        private void set_126_Game_championId(object instance, object Value)
        {
            var that = (global::Well_Played.Models.Game)instance;
            that.championId = (global::System.Int32)Value;
        }
        private object get_127_Game_createDate(object instance)
        {
            var that = (global::Well_Played.Models.Game)instance;
            return that.createDate;
        }
        private void set_127_Game_createDate(object instance, object Value)
        {
            var that = (global::Well_Played.Models.Game)instance;
            that.createDate = (global::System.Int64)Value;
        }
        private object get_128_Game_fellowPlayers(object instance)
        {
            var that = (global::Well_Played.Models.Game)instance;
            return that.fellowPlayers;
        }
        private void set_128_Game_fellowPlayers(object instance, object Value)
        {
            var that = (global::Well_Played.Models.Game)instance;
            that.fellowPlayers = (global::System.Collections.Generic.List<global::Well_Played.Models.Player>)Value;
        }
        private object get_129_Player_championId(object instance)
        {
            var that = (global::Well_Played.Models.Player)instance;
            return that.championId;
        }
        private void set_129_Player_championId(object instance, object Value)
        {
            var that = (global::Well_Played.Models.Player)instance;
            that.championId = (global::System.Int32)Value;
        }
        private object get_130_Player_summonerId(object instance)
        {
            var that = (global::Well_Played.Models.Player)instance;
            return that.summonerId;
        }
        private void set_130_Player_summonerId(object instance, object Value)
        {
            var that = (global::Well_Played.Models.Player)instance;
            that.summonerId = (global::System.Int64)Value;
        }
        private object get_131_Player_teamId(object instance)
        {
            var that = (global::Well_Played.Models.Player)instance;
            return that.teamId;
        }
        private void set_131_Player_teamId(object instance, object Value)
        {
            var that = (global::Well_Played.Models.Player)instance;
            that.teamId = (global::System.Int32)Value;
        }
        private object get_132_Game_gameId(object instance)
        {
            var that = (global::Well_Played.Models.Game)instance;
            return that.gameId;
        }
        private void set_132_Game_gameId(object instance, object Value)
        {
            var that = (global::Well_Played.Models.Game)instance;
            that.gameId = (global::System.Int64)Value;
        }
        private object get_133_Game_gameMode(object instance)
        {
            var that = (global::Well_Played.Models.Game)instance;
            return that.gameMode;
        }
        private void set_133_Game_gameMode(object instance, object Value)
        {
            var that = (global::Well_Played.Models.Game)instance;
            that.gameMode = (global::System.String)Value;
        }
        private object get_134_Game_gameType(object instance)
        {
            var that = (global::Well_Played.Models.Game)instance;
            return that.gameType;
        }
        private void set_134_Game_gameType(object instance, object Value)
        {
            var that = (global::Well_Played.Models.Game)instance;
            that.gameType = (global::System.String)Value;
        }
        private object get_135_Game_invalid(object instance)
        {
            var that = (global::Well_Played.Models.Game)instance;
            return that.invalid;
        }
        private void set_135_Game_invalid(object instance, object Value)
        {
            var that = (global::Well_Played.Models.Game)instance;
            that.invalid = (global::System.Boolean)Value;
        }
        private object get_136_Game_ipEarned(object instance)
        {
            var that = (global::Well_Played.Models.Game)instance;
            return that.ipEarned;
        }
        private void set_136_Game_ipEarned(object instance, object Value)
        {
            var that = (global::Well_Played.Models.Game)instance;
            that.ipEarned = (global::System.Int32)Value;
        }
        private object get_137_Game_level(object instance)
        {
            var that = (global::Well_Played.Models.Game)instance;
            return that.level;
        }
        private void set_137_Game_level(object instance, object Value)
        {
            var that = (global::Well_Played.Models.Game)instance;
            that.level = (global::System.Int32)Value;
        }
        private object get_138_Game_mapId(object instance)
        {
            var that = (global::Well_Played.Models.Game)instance;
            return that.mapId;
        }
        private void set_138_Game_mapId(object instance, object Value)
        {
            var that = (global::Well_Played.Models.Game)instance;
            that.mapId = (global::System.Int32)Value;
        }
        private object get_139_Game_spell1(object instance)
        {
            var that = (global::Well_Played.Models.Game)instance;
            return that.spell1;
        }
        private void set_139_Game_spell1(object instance, object Value)
        {
            var that = (global::Well_Played.Models.Game)instance;
            that.spell1 = (global::System.Int32)Value;
        }
        private object get_140_Game_spell2(object instance)
        {
            var that = (global::Well_Played.Models.Game)instance;
            return that.spell2;
        }
        private void set_140_Game_spell2(object instance, object Value)
        {
            var that = (global::Well_Played.Models.Game)instance;
            that.spell2 = (global::System.Int32)Value;
        }
        private object get_141_Game_stats(object instance)
        {
            var that = (global::Well_Played.Models.Game)instance;
            return that.stats;
        }
        private void set_141_Game_stats(object instance, object Value)
        {
            var that = (global::Well_Played.Models.Game)instance;
            that.stats = (global::Well_Played.Models.RawStats)Value;
        }
        private object get_142_Game_subType(object instance)
        {
            var that = (global::Well_Played.Models.Game)instance;
            return that.subType;
        }
        private void set_142_Game_subType(object instance, object Value)
        {
            var that = (global::Well_Played.Models.Game)instance;
            that.subType = (global::System.String)Value;
        }
        private object get_143_Game_teamId(object instance)
        {
            var that = (global::Well_Played.Models.Game)instance;
            return that.teamId;
        }
        private void set_143_Game_teamId(object instance, object Value)
        {
            var that = (global::Well_Played.Models.Game)instance;
            that.teamId = (global::System.Int32)Value;
        }
        private object get_144_Game_win(object instance)
        {
            var that = (global::Well_Played.Models.Game)instance;
            return that.win;
        }
        private void set_144_Game_win(object instance, object Value)
        {
            var that = (global::Well_Played.Models.Game)instance;
            that.win = (global::System.String)Value;
        }
        private object get_145_Game_color(object instance)
        {
            var that = (global::Well_Played.Models.Game)instance;
            return that.color;
        }
        private void set_145_Game_color(object instance, object Value)
        {
            var that = (global::Well_Played.Models.Game)instance;
            that.color = (global::System.String)Value;
        }
        private object get_146_Game_thumbnail(object instance)
        {
            var that = (global::Well_Played.Models.Game)instance;
            return that.thumbnail;
        }
        private void set_146_Game_thumbnail(object instance, object Value)
        {
            var that = (global::Well_Played.Models.Game)instance;
            that.thumbnail = (global::System.String)Value;
        }
        private object get_147_Game_gameDate(object instance)
        {
            var that = (global::Well_Played.Models.Game)instance;
            return that.gameDate;
        }
        private void set_147_Game_gameDate(object instance, object Value)
        {
            var that = (global::Well_Played.Models.Game)instance;
            that.gameDate = (global::System.DateTime)Value;
        }
        private object get_148_Summoner_ListOfMatches(object instance)
        {
            var that = (global::Well_Played.Summoner)instance;
            return that.ListOfMatches;
        }
        private void set_148_Summoner_ListOfMatches(object instance, object Value)
        {
            var that = (global::Well_Played.Summoner)instance;
            that.ListOfMatches = (global::Well_Played.Models.MatchList)Value;
        }

        private global::Windows.UI.Xaml.Markup.IXamlMember CreateXamlMember(string longMemberName)
        {
            global::Well_Played.Well_Played_XamlTypeInfo.XamlMember xamlMember = null;
            global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType userType;

            switch (longMemberName)
            {
            case "Well_Played.Champions.LeagueChampions":
                userType = (global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Well_Played.Champions");
                xamlMember = new global::Well_Played.Well_Played_XamlTypeInfo.XamlMember(this, "LeagueChampions", "System.Collections.ObjectModel.ObservableCollection`1<Well_Played.Models.Champion>");
                xamlMember.Getter = get_0_Champions_LeagueChampions;
                xamlMember.Setter = set_0_Champions_LeagueChampions;
                break;
            case "Well_Played.Models.Champion.allytips":
                userType = (global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Well_Played.Models.Champion");
                xamlMember = new global::Well_Played.Well_Played_XamlTypeInfo.XamlMember(this, "allytips", "System.Collections.Generic.List`1<String>");
                xamlMember.Getter = get_1_Champion_allytips;
                xamlMember.Setter = set_1_Champion_allytips;
                break;
            case "Well_Played.Models.Champion.blurb":
                userType = (global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Well_Played.Models.Champion");
                xamlMember = new global::Well_Played.Well_Played_XamlTypeInfo.XamlMember(this, "blurb", "String");
                xamlMember.Getter = get_2_Champion_blurb;
                xamlMember.Setter = set_2_Champion_blurb;
                break;
            case "Well_Played.Models.Champion.enemytips":
                userType = (global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Well_Played.Models.Champion");
                xamlMember = new global::Well_Played.Well_Played_XamlTypeInfo.XamlMember(this, "enemytips", "System.Collections.Generic.List`1<String>");
                xamlMember.Getter = get_3_Champion_enemytips;
                xamlMember.Setter = set_3_Champion_enemytips;
                break;
            case "Well_Played.Models.Champion.id":
                userType = (global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Well_Played.Models.Champion");
                xamlMember = new global::Well_Played.Well_Played_XamlTypeInfo.XamlMember(this, "id", "Int32");
                xamlMember.Getter = get_4_Champion_id;
                xamlMember.Setter = set_4_Champion_id;
                break;
            case "Well_Played.Models.Champion.image":
                userType = (global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Well_Played.Models.Champion");
                xamlMember = new global::Well_Played.Well_Played_XamlTypeInfo.XamlMember(this, "image", "Well_Played.Models.Image");
                xamlMember.Getter = get_5_Champion_image;
                xamlMember.Setter = set_5_Champion_image;
                break;
            case "Well_Played.Models.Champion.info":
                userType = (global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Well_Played.Models.Champion");
                xamlMember = new global::Well_Played.Well_Played_XamlTypeInfo.XamlMember(this, "info", "Well_Played.Models.Info");
                xamlMember.Getter = get_6_Champion_info;
                xamlMember.Setter = set_6_Champion_info;
                break;
            case "Well_Played.Models.Champion.key":
                userType = (global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Well_Played.Models.Champion");
                xamlMember = new global::Well_Played.Well_Played_XamlTypeInfo.XamlMember(this, "key", "String");
                xamlMember.Getter = get_7_Champion_key;
                xamlMember.Setter = set_7_Champion_key;
                break;
            case "Well_Played.Models.Champion.lore":
                userType = (global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Well_Played.Models.Champion");
                xamlMember = new global::Well_Played.Well_Played_XamlTypeInfo.XamlMember(this, "lore", "String");
                xamlMember.Getter = get_8_Champion_lore;
                xamlMember.Setter = set_8_Champion_lore;
                break;
            case "Well_Played.Models.Champion.name":
                userType = (global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Well_Played.Models.Champion");
                xamlMember = new global::Well_Played.Well_Played_XamlTypeInfo.XamlMember(this, "name", "String");
                xamlMember.Getter = get_9_Champion_name;
                xamlMember.Setter = set_9_Champion_name;
                break;
            case "Well_Played.Models.Champion.partype":
                userType = (global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Well_Played.Models.Champion");
                xamlMember = new global::Well_Played.Well_Played_XamlTypeInfo.XamlMember(this, "partype", "String");
                xamlMember.Getter = get_10_Champion_partype;
                xamlMember.Setter = set_10_Champion_partype;
                break;
            case "Well_Played.Models.Champion.passive":
                userType = (global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Well_Played.Models.Champion");
                xamlMember = new global::Well_Played.Well_Played_XamlTypeInfo.XamlMember(this, "passive", "Well_Played.Models.Passive");
                xamlMember.Getter = get_11_Champion_passive;
                xamlMember.Setter = set_11_Champion_passive;
                break;
            case "Well_Played.Models.Champion.recommended":
                userType = (global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Well_Played.Models.Champion");
                xamlMember = new global::Well_Played.Well_Played_XamlTypeInfo.XamlMember(this, "recommended", "System.Collections.Generic.List`1<Well_Played.Models.Recommended>");
                xamlMember.Getter = get_12_Champion_recommended;
                xamlMember.Setter = set_12_Champion_recommended;
                break;
            case "Well_Played.Models.Recommended.blocks":
                userType = (global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Well_Played.Models.Recommended");
                xamlMember = new global::Well_Played.Well_Played_XamlTypeInfo.XamlMember(this, "blocks", "System.Collections.Generic.List`1<Well_Played.Models.Block>");
                xamlMember.Getter = get_13_Recommended_blocks;
                xamlMember.Setter = set_13_Recommended_blocks;
                break;
            case "Well_Played.Models.Block.items":
                userType = (global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Well_Played.Models.Block");
                xamlMember = new global::Well_Played.Well_Played_XamlTypeInfo.XamlMember(this, "items", "System.Collections.Generic.List`1<Well_Played.Models.BlockItem>");
                xamlMember.Getter = get_14_Block_items;
                xamlMember.Setter = set_14_Block_items;
                break;
            case "Well_Played.Models.BlockItem.count":
                userType = (global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Well_Played.Models.BlockItem");
                xamlMember = new global::Well_Played.Well_Played_XamlTypeInfo.XamlMember(this, "count", "Int32");
                xamlMember.Getter = get_15_BlockItem_count;
                xamlMember.Setter = set_15_BlockItem_count;
                break;
            case "Well_Played.Models.BlockItem.id":
                userType = (global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Well_Played.Models.BlockItem");
                xamlMember = new global::Well_Played.Well_Played_XamlTypeInfo.XamlMember(this, "id", "Int32");
                xamlMember.Getter = get_16_BlockItem_id;
                xamlMember.Setter = set_16_BlockItem_id;
                break;
            case "Well_Played.Models.Block.recMath":
                userType = (global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Well_Played.Models.Block");
                xamlMember = new global::Well_Played.Well_Played_XamlTypeInfo.XamlMember(this, "recMath", "Boolean");
                xamlMember.Getter = get_17_Block_recMath;
                xamlMember.Setter = set_17_Block_recMath;
                break;
            case "Well_Played.Models.Block.type":
                userType = (global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Well_Played.Models.Block");
                xamlMember = new global::Well_Played.Well_Played_XamlTypeInfo.XamlMember(this, "type", "String");
                xamlMember.Getter = get_18_Block_type;
                xamlMember.Setter = set_18_Block_type;
                break;
            case "Well_Played.Models.Recommended.champion":
                userType = (global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Well_Played.Models.Recommended");
                xamlMember = new global::Well_Played.Well_Played_XamlTypeInfo.XamlMember(this, "champion", "String");
                xamlMember.Getter = get_19_Recommended_champion;
                xamlMember.Setter = set_19_Recommended_champion;
                break;
            case "Well_Played.Models.Recommended.map":
                userType = (global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Well_Played.Models.Recommended");
                xamlMember = new global::Well_Played.Well_Played_XamlTypeInfo.XamlMember(this, "map", "String");
                xamlMember.Getter = get_20_Recommended_map;
                xamlMember.Setter = set_20_Recommended_map;
                break;
            case "Well_Played.Models.Recommended.mode":
                userType = (global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Well_Played.Models.Recommended");
                xamlMember = new global::Well_Played.Well_Played_XamlTypeInfo.XamlMember(this, "mode", "String");
                xamlMember.Getter = get_21_Recommended_mode;
                xamlMember.Setter = set_21_Recommended_mode;
                break;
            case "Well_Played.Models.Recommended.priority":
                userType = (global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Well_Played.Models.Recommended");
                xamlMember = new global::Well_Played.Well_Played_XamlTypeInfo.XamlMember(this, "priority", "Boolean");
                xamlMember.Getter = get_22_Recommended_priority;
                xamlMember.Setter = set_22_Recommended_priority;
                break;
            case "Well_Played.Models.Recommended.title":
                userType = (global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Well_Played.Models.Recommended");
                xamlMember = new global::Well_Played.Well_Played_XamlTypeInfo.XamlMember(this, "title", "String");
                xamlMember.Getter = get_23_Recommended_title;
                xamlMember.Setter = set_23_Recommended_title;
                break;
            case "Well_Played.Models.Recommended.type":
                userType = (global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Well_Played.Models.Recommended");
                xamlMember = new global::Well_Played.Well_Played_XamlTypeInfo.XamlMember(this, "type", "String");
                xamlMember.Getter = get_24_Recommended_type;
                xamlMember.Setter = set_24_Recommended_type;
                break;
            case "Well_Played.Models.Champion.skins":
                userType = (global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Well_Played.Models.Champion");
                xamlMember = new global::Well_Played.Well_Played_XamlTypeInfo.XamlMember(this, "skins", "System.Collections.Generic.List`1<Well_Played.Models.Skin>");
                xamlMember.Getter = get_25_Champion_skins;
                xamlMember.Setter = set_25_Champion_skins;
                break;
            case "Well_Played.Models.Skin.id":
                userType = (global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Well_Played.Models.Skin");
                xamlMember = new global::Well_Played.Well_Played_XamlTypeInfo.XamlMember(this, "id", "Int32");
                xamlMember.Getter = get_26_Skin_id;
                xamlMember.Setter = set_26_Skin_id;
                break;
            case "Well_Played.Models.Skin.name":
                userType = (global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Well_Played.Models.Skin");
                xamlMember = new global::Well_Played.Well_Played_XamlTypeInfo.XamlMember(this, "name", "String");
                xamlMember.Getter = get_27_Skin_name;
                xamlMember.Setter = set_27_Skin_name;
                break;
            case "Well_Played.Models.Skin.num":
                userType = (global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Well_Played.Models.Skin");
                xamlMember = new global::Well_Played.Well_Played_XamlTypeInfo.XamlMember(this, "num", "Int32");
                xamlMember.Getter = get_28_Skin_num;
                xamlMember.Setter = set_28_Skin_num;
                break;
            case "Well_Played.Models.Champion.spells":
                userType = (global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Well_Played.Models.Champion");
                xamlMember = new global::Well_Played.Well_Played_XamlTypeInfo.XamlMember(this, "spells", "System.Collections.Generic.List`1<Well_Played.Models.ChampionSpell>");
                xamlMember.Getter = get_29_Champion_spells;
                xamlMember.Setter = set_29_Champion_spells;
                break;
            case "Well_Played.Models.ChampionSpell.altimages":
                userType = (global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Well_Played.Models.ChampionSpell");
                xamlMember = new global::Well_Played.Well_Played_XamlTypeInfo.XamlMember(this, "altimages", "System.Collections.Generic.List`1<Well_Played.Models.Image>");
                xamlMember.Getter = get_30_ChampionSpell_altimages;
                xamlMember.Setter = set_30_ChampionSpell_altimages;
                break;
            case "Well_Played.Models.Image.full":
                userType = (global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Well_Played.Models.Image");
                xamlMember = new global::Well_Played.Well_Played_XamlTypeInfo.XamlMember(this, "full", "String");
                xamlMember.Getter = get_31_Image_full;
                xamlMember.Setter = set_31_Image_full;
                break;
            case "Well_Played.Models.Image.group":
                userType = (global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Well_Played.Models.Image");
                xamlMember = new global::Well_Played.Well_Played_XamlTypeInfo.XamlMember(this, "group", "String");
                xamlMember.Getter = get_32_Image_group;
                xamlMember.Setter = set_32_Image_group;
                break;
            case "Well_Played.Models.Image.h":
                userType = (global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Well_Played.Models.Image");
                xamlMember = new global::Well_Played.Well_Played_XamlTypeInfo.XamlMember(this, "h", "Int32");
                xamlMember.Getter = get_33_Image_h;
                xamlMember.Setter = set_33_Image_h;
                break;
            case "Well_Played.Models.Image.sprite":
                userType = (global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Well_Played.Models.Image");
                xamlMember = new global::Well_Played.Well_Played_XamlTypeInfo.XamlMember(this, "sprite", "String");
                xamlMember.Getter = get_34_Image_sprite;
                xamlMember.Setter = set_34_Image_sprite;
                break;
            case "Well_Played.Models.Image.w":
                userType = (global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Well_Played.Models.Image");
                xamlMember = new global::Well_Played.Well_Played_XamlTypeInfo.XamlMember(this, "w", "Int32");
                xamlMember.Getter = get_35_Image_w;
                xamlMember.Setter = set_35_Image_w;
                break;
            case "Well_Played.Models.Image.x":
                userType = (global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Well_Played.Models.Image");
                xamlMember = new global::Well_Played.Well_Played_XamlTypeInfo.XamlMember(this, "x", "Int32");
                xamlMember.Getter = get_36_Image_x;
                xamlMember.Setter = set_36_Image_x;
                break;
            case "Well_Played.Models.Image.y":
                userType = (global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Well_Played.Models.Image");
                xamlMember = new global::Well_Played.Well_Played_XamlTypeInfo.XamlMember(this, "y", "Int32");
                xamlMember.Getter = get_37_Image_y;
                xamlMember.Setter = set_37_Image_y;
                break;
            case "Well_Played.Models.Image.url":
                userType = (global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Well_Played.Models.Image");
                xamlMember = new global::Well_Played.Well_Played_XamlTypeInfo.XamlMember(this, "url", "String");
                xamlMember.Getter = get_38_Image_url;
                xamlMember.Setter = set_38_Image_url;
                break;
            case "Well_Played.Models.ChampionSpell.cooldown":
                userType = (global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Well_Played.Models.ChampionSpell");
                xamlMember = new global::Well_Played.Well_Played_XamlTypeInfo.XamlMember(this, "cooldown", "System.Collections.Generic.List`1<Double>");
                xamlMember.Getter = get_39_ChampionSpell_cooldown;
                xamlMember.Setter = set_39_ChampionSpell_cooldown;
                break;
            case "Well_Played.Models.ChampionSpell.cooldownBurn":
                userType = (global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Well_Played.Models.ChampionSpell");
                xamlMember = new global::Well_Played.Well_Played_XamlTypeInfo.XamlMember(this, "cooldownBurn", "String");
                xamlMember.Getter = get_40_ChampionSpell_cooldownBurn;
                xamlMember.Setter = set_40_ChampionSpell_cooldownBurn;
                break;
            case "Well_Played.Models.ChampionSpell.cost":
                userType = (global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Well_Played.Models.ChampionSpell");
                xamlMember = new global::Well_Played.Well_Played_XamlTypeInfo.XamlMember(this, "cost", "System.Collections.Generic.List`1<Int32>");
                xamlMember.Getter = get_41_ChampionSpell_cost;
                xamlMember.Setter = set_41_ChampionSpell_cost;
                break;
            case "Well_Played.Models.ChampionSpell.costBurn":
                userType = (global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Well_Played.Models.ChampionSpell");
                xamlMember = new global::Well_Played.Well_Played_XamlTypeInfo.XamlMember(this, "costBurn", "String");
                xamlMember.Getter = get_42_ChampionSpell_costBurn;
                xamlMember.Setter = set_42_ChampionSpell_costBurn;
                break;
            case "Well_Played.Models.ChampionSpell.costType":
                userType = (global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Well_Played.Models.ChampionSpell");
                xamlMember = new global::Well_Played.Well_Played_XamlTypeInfo.XamlMember(this, "costType", "String");
                xamlMember.Getter = get_43_ChampionSpell_costType;
                xamlMember.Setter = set_43_ChampionSpell_costType;
                break;
            case "Well_Played.Models.ChampionSpell.description":
                userType = (global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Well_Played.Models.ChampionSpell");
                xamlMember = new global::Well_Played.Well_Played_XamlTypeInfo.XamlMember(this, "description", "String");
                xamlMember.Getter = get_44_ChampionSpell_description;
                xamlMember.Setter = set_44_ChampionSpell_description;
                break;
            case "Well_Played.Models.ChampionSpell.effect":
                userType = (global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Well_Played.Models.ChampionSpell");
                xamlMember = new global::Well_Played.Well_Played_XamlTypeInfo.XamlMember(this, "effect", "System.Collections.Generic.List`1<Object>");
                xamlMember.Getter = get_45_ChampionSpell_effect;
                xamlMember.Setter = set_45_ChampionSpell_effect;
                break;
            case "Well_Played.Models.ChampionSpell.effectBurn":
                userType = (global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Well_Played.Models.ChampionSpell");
                xamlMember = new global::Well_Played.Well_Played_XamlTypeInfo.XamlMember(this, "effectBurn", "System.Collections.Generic.List`1<String>");
                xamlMember.Getter = get_46_ChampionSpell_effectBurn;
                xamlMember.Setter = set_46_ChampionSpell_effectBurn;
                break;
            case "Well_Played.Models.ChampionSpell.image":
                userType = (global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Well_Played.Models.ChampionSpell");
                xamlMember = new global::Well_Played.Well_Played_XamlTypeInfo.XamlMember(this, "image", "Well_Played.Models.Image");
                xamlMember.Getter = get_47_ChampionSpell_image;
                xamlMember.Setter = set_47_ChampionSpell_image;
                break;
            case "Well_Played.Models.ChampionSpell.key":
                userType = (global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Well_Played.Models.ChampionSpell");
                xamlMember = new global::Well_Played.Well_Played_XamlTypeInfo.XamlMember(this, "key", "String");
                xamlMember.Getter = get_48_ChampionSpell_key;
                xamlMember.Setter = set_48_ChampionSpell_key;
                break;
            case "Well_Played.Models.ChampionSpell.leveltip":
                userType = (global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Well_Played.Models.ChampionSpell");
                xamlMember = new global::Well_Played.Well_Played_XamlTypeInfo.XamlMember(this, "leveltip", "Well_Played.Models.LevelTip");
                xamlMember.Getter = get_49_ChampionSpell_leveltip;
                xamlMember.Setter = set_49_ChampionSpell_leveltip;
                break;
            case "Well_Played.Models.ChampionSpell.maxrank":
                userType = (global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Well_Played.Models.ChampionSpell");
                xamlMember = new global::Well_Played.Well_Played_XamlTypeInfo.XamlMember(this, "maxrank", "Int32");
                xamlMember.Getter = get_50_ChampionSpell_maxrank;
                xamlMember.Setter = set_50_ChampionSpell_maxrank;
                break;
            case "Well_Played.Models.ChampionSpell.name":
                userType = (global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Well_Played.Models.ChampionSpell");
                xamlMember = new global::Well_Played.Well_Played_XamlTypeInfo.XamlMember(this, "name", "String");
                xamlMember.Getter = get_51_ChampionSpell_name;
                xamlMember.Setter = set_51_ChampionSpell_name;
                break;
            case "Well_Played.Models.ChampionSpell.range":
                userType = (global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Well_Played.Models.ChampionSpell");
                xamlMember = new global::Well_Played.Well_Played_XamlTypeInfo.XamlMember(this, "range", "Object");
                xamlMember.Getter = get_52_ChampionSpell_range;
                xamlMember.Setter = set_52_ChampionSpell_range;
                break;
            case "Well_Played.Models.ChampionSpell.rangeBurn":
                userType = (global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Well_Played.Models.ChampionSpell");
                xamlMember = new global::Well_Played.Well_Played_XamlTypeInfo.XamlMember(this, "rangeBurn", "String");
                xamlMember.Getter = get_53_ChampionSpell_rangeBurn;
                xamlMember.Setter = set_53_ChampionSpell_rangeBurn;
                break;
            case "Well_Played.Models.ChampionSpell.resource":
                userType = (global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Well_Played.Models.ChampionSpell");
                xamlMember = new global::Well_Played.Well_Played_XamlTypeInfo.XamlMember(this, "resource", "String");
                xamlMember.Getter = get_54_ChampionSpell_resource;
                xamlMember.Setter = set_54_ChampionSpell_resource;
                break;
            case "Well_Played.Models.ChampionSpell.sanitizedDescription":
                userType = (global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Well_Played.Models.ChampionSpell");
                xamlMember = new global::Well_Played.Well_Played_XamlTypeInfo.XamlMember(this, "sanitizedDescription", "String");
                xamlMember.Getter = get_55_ChampionSpell_sanitizedDescription;
                xamlMember.Setter = set_55_ChampionSpell_sanitizedDescription;
                break;
            case "Well_Played.Models.ChampionSpell.sanitizedTooltip":
                userType = (global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Well_Played.Models.ChampionSpell");
                xamlMember = new global::Well_Played.Well_Played_XamlTypeInfo.XamlMember(this, "sanitizedTooltip", "String");
                xamlMember.Getter = get_56_ChampionSpell_sanitizedTooltip;
                xamlMember.Setter = set_56_ChampionSpell_sanitizedTooltip;
                break;
            case "Well_Played.Models.ChampionSpell.tooltip":
                userType = (global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Well_Played.Models.ChampionSpell");
                xamlMember = new global::Well_Played.Well_Played_XamlTypeInfo.XamlMember(this, "tooltip", "String");
                xamlMember.Getter = get_57_ChampionSpell_tooltip;
                xamlMember.Setter = set_57_ChampionSpell_tooltip;
                break;
            case "Well_Played.Models.ChampionSpell.vars":
                userType = (global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Well_Played.Models.ChampionSpell");
                xamlMember = new global::Well_Played.Well_Played_XamlTypeInfo.XamlMember(this, "vars", "System.Collections.Generic.List`1<Well_Played.Models.SpellVars>");
                xamlMember.Getter = get_58_ChampionSpell_vars;
                xamlMember.Setter = set_58_ChampionSpell_vars;
                break;
            case "Well_Played.Models.SpellVars.coeff":
                userType = (global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Well_Played.Models.SpellVars");
                xamlMember = new global::Well_Played.Well_Played_XamlTypeInfo.XamlMember(this, "coeff", "System.Collections.Generic.List`1<Double>");
                xamlMember.Getter = get_59_SpellVars_coeff;
                xamlMember.Setter = set_59_SpellVars_coeff;
                break;
            case "Well_Played.Models.SpellVars.dyn":
                userType = (global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Well_Played.Models.SpellVars");
                xamlMember = new global::Well_Played.Well_Played_XamlTypeInfo.XamlMember(this, "dyn", "String");
                xamlMember.Getter = get_60_SpellVars_dyn;
                xamlMember.Setter = set_60_SpellVars_dyn;
                break;
            case "Well_Played.Models.SpellVars.key":
                userType = (global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Well_Played.Models.SpellVars");
                xamlMember = new global::Well_Played.Well_Played_XamlTypeInfo.XamlMember(this, "key", "String");
                xamlMember.Getter = get_61_SpellVars_key;
                xamlMember.Setter = set_61_SpellVars_key;
                break;
            case "Well_Played.Models.SpellVars.link":
                userType = (global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Well_Played.Models.SpellVars");
                xamlMember = new global::Well_Played.Well_Played_XamlTypeInfo.XamlMember(this, "link", "String");
                xamlMember.Getter = get_62_SpellVars_link;
                xamlMember.Setter = set_62_SpellVars_link;
                break;
            case "Well_Played.Models.SpellVars.ranksWith":
                userType = (global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Well_Played.Models.SpellVars");
                xamlMember = new global::Well_Played.Well_Played_XamlTypeInfo.XamlMember(this, "ranksWith", "String");
                xamlMember.Getter = get_63_SpellVars_ranksWith;
                xamlMember.Setter = set_63_SpellVars_ranksWith;
                break;
            case "Well_Played.Models.Champion.stats":
                userType = (global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Well_Played.Models.Champion");
                xamlMember = new global::Well_Played.Well_Played_XamlTypeInfo.XamlMember(this, "stats", "Well_Played.Models.RankedStats");
                xamlMember.Getter = get_64_Champion_stats;
                xamlMember.Setter = set_64_Champion_stats;
                break;
            case "Well_Played.Models.Champion.tags":
                userType = (global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Well_Played.Models.Champion");
                xamlMember = new global::Well_Played.Well_Played_XamlTypeInfo.XamlMember(this, "tags", "System.Collections.Generic.List`1<String>");
                xamlMember.Getter = get_65_Champion_tags;
                xamlMember.Setter = set_65_Champion_tags;
                break;
            case "Well_Played.Models.Champion.title":
                userType = (global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Well_Played.Models.Champion");
                xamlMember = new global::Well_Played.Well_Played_XamlTypeInfo.XamlMember(this, "title", "String");
                xamlMember.Getter = get_66_Champion_title;
                xamlMember.Setter = set_66_Champion_title;
                break;
            case "Well_Played.Models.Champion.thumbnail":
                userType = (global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Well_Played.Models.Champion");
                xamlMember = new global::Well_Played.Well_Played_XamlTypeInfo.XamlMember(this, "thumbnail", "String");
                xamlMember.Getter = get_67_Champion_thumbnail;
                xamlMember.Setter = set_67_Champion_thumbnail;
                break;
            case "Well_Played.Champions.FullLeagueChampions":
                userType = (global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Well_Played.Champions");
                xamlMember = new global::Well_Played.Well_Played_XamlTypeInfo.XamlMember(this, "FullLeagueChampions", "System.Collections.ObjectModel.ObservableCollection`1<Well_Played.Models.Champion>");
                xamlMember.Getter = get_68_Champions_FullLeagueChampions;
                xamlMember.Setter = set_68_Champions_FullLeagueChampions;
                break;
            case "Well_Played.Champions.ListOfChampions":
                userType = (global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Well_Played.Champions");
                xamlMember = new global::Well_Played.Well_Played_XamlTypeInfo.XamlMember(this, "ListOfChampions", "Well_Played.Models.ChampionList");
                xamlMember.Getter = get_69_Champions_ListOfChampions;
                xamlMember.Setter = set_69_Champions_ListOfChampions;
                break;
            case "Well_Played.Item.buildsInto":
                userType = (global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Well_Played.Item");
                xamlMember = new global::Well_Played.Well_Played_XamlTypeInfo.XamlMember(this, "buildsInto", "System.Collections.ObjectModel.ObservableCollection`1<Well_Played.Models.Item>");
                xamlMember.Getter = get_70_Item_buildsInto;
                xamlMember.Setter = set_70_Item_buildsInto;
                break;
            case "Well_Played.Models.Item.colloq":
                userType = (global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Well_Played.Models.Item");
                xamlMember = new global::Well_Played.Well_Played_XamlTypeInfo.XamlMember(this, "colloq", "String");
                xamlMember.Getter = get_71_Item_colloq;
                xamlMember.Setter = set_71_Item_colloq;
                break;
            case "Well_Played.Models.Item.consumeOnFull":
                userType = (global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Well_Played.Models.Item");
                xamlMember = new global::Well_Played.Well_Played_XamlTypeInfo.XamlMember(this, "consumeOnFull", "Boolean");
                xamlMember.Getter = get_72_Item_consumeOnFull;
                xamlMember.Setter = set_72_Item_consumeOnFull;
                break;
            case "Well_Played.Models.Item.consumed":
                userType = (global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Well_Played.Models.Item");
                xamlMember = new global::Well_Played.Well_Played_XamlTypeInfo.XamlMember(this, "consumed", "Boolean");
                xamlMember.Getter = get_73_Item_consumed;
                xamlMember.Setter = set_73_Item_consumed;
                break;
            case "Well_Played.Models.Item.depth":
                userType = (global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Well_Played.Models.Item");
                xamlMember = new global::Well_Played.Well_Played_XamlTypeInfo.XamlMember(this, "depth", "Int32");
                xamlMember.Getter = get_74_Item_depth;
                xamlMember.Setter = set_74_Item_depth;
                break;
            case "Well_Played.Models.Item.description":
                userType = (global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Well_Played.Models.Item");
                xamlMember = new global::Well_Played.Well_Played_XamlTypeInfo.XamlMember(this, "description", "String");
                xamlMember.Getter = get_75_Item_description;
                xamlMember.Setter = set_75_Item_description;
                break;
            case "Well_Played.Models.Item.from":
                userType = (global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Well_Played.Models.Item");
                xamlMember = new global::Well_Played.Well_Played_XamlTypeInfo.XamlMember(this, "from", "System.Collections.Generic.List`1<String>");
                xamlMember.Getter = get_76_Item_from;
                xamlMember.Setter = set_76_Item_from;
                break;
            case "Well_Played.Models.Item.gold":
                userType = (global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Well_Played.Models.Item");
                xamlMember = new global::Well_Played.Well_Played_XamlTypeInfo.XamlMember(this, "gold", "Well_Played.Models.Gold");
                xamlMember.Getter = get_77_Item_gold;
                xamlMember.Setter = set_77_Item_gold;
                break;
            case "Well_Played.Models.Item.group":
                userType = (global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Well_Played.Models.Item");
                xamlMember = new global::Well_Played.Well_Played_XamlTypeInfo.XamlMember(this, "group", "String");
                xamlMember.Getter = get_78_Item_group;
                xamlMember.Setter = set_78_Item_group;
                break;
            case "Well_Played.Models.Item.hideFromAll":
                userType = (global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Well_Played.Models.Item");
                xamlMember = new global::Well_Played.Well_Played_XamlTypeInfo.XamlMember(this, "hideFromAll", "Boolean");
                xamlMember.Getter = get_79_Item_hideFromAll;
                xamlMember.Setter = set_79_Item_hideFromAll;
                break;
            case "Well_Played.Models.Item.id":
                userType = (global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Well_Played.Models.Item");
                xamlMember = new global::Well_Played.Well_Played_XamlTypeInfo.XamlMember(this, "id", "Int32");
                xamlMember.Getter = get_80_Item_id;
                xamlMember.Setter = set_80_Item_id;
                break;
            case "Well_Played.Models.Item.image":
                userType = (global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Well_Played.Models.Item");
                xamlMember = new global::Well_Played.Well_Played_XamlTypeInfo.XamlMember(this, "image", "Well_Played.Models.Image");
                xamlMember.Getter = get_81_Item_image;
                xamlMember.Setter = set_81_Item_image;
                break;
            case "Well_Played.Models.Item.imageURL":
                userType = (global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Well_Played.Models.Item");
                xamlMember = new global::Well_Played.Well_Played_XamlTypeInfo.XamlMember(this, "imageURL", "String");
                xamlMember.Getter = get_82_Item_imageURL;
                xamlMember.Setter = set_82_Item_imageURL;
                break;
            case "Well_Played.Models.Item.inStore":
                userType = (global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Well_Played.Models.Item");
                xamlMember = new global::Well_Played.Well_Played_XamlTypeInfo.XamlMember(this, "inStore", "Boolean");
                xamlMember.Getter = get_83_Item_inStore;
                xamlMember.Setter = set_83_Item_inStore;
                break;
            case "Well_Played.Models.Item.into":
                userType = (global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Well_Played.Models.Item");
                xamlMember = new global::Well_Played.Well_Played_XamlTypeInfo.XamlMember(this, "into", "System.Collections.Generic.List`1<String>");
                xamlMember.Getter = get_84_Item_into;
                xamlMember.Setter = set_84_Item_into;
                break;
            case "Well_Played.Models.Item.maps":
                userType = (global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Well_Played.Models.Item");
                xamlMember = new global::Well_Played.Well_Played_XamlTypeInfo.XamlMember(this, "maps", "System.Collections.Generic.Dictionary`2<String, Boolean>");
                xamlMember.Getter = get_85_Item_maps;
                xamlMember.Setter = set_85_Item_maps;
                break;
            case "Well_Played.Models.Item.name":
                userType = (global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Well_Played.Models.Item");
                xamlMember = new global::Well_Played.Well_Played_XamlTypeInfo.XamlMember(this, "name", "String");
                xamlMember.Getter = get_86_Item_name;
                xamlMember.Setter = set_86_Item_name;
                break;
            case "Well_Played.Models.Item.plaintext":
                userType = (global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Well_Played.Models.Item");
                xamlMember = new global::Well_Played.Well_Played_XamlTypeInfo.XamlMember(this, "plaintext", "String");
                xamlMember.Getter = get_87_Item_plaintext;
                xamlMember.Setter = set_87_Item_plaintext;
                break;
            case "Well_Played.Models.Item.requiredChampion":
                userType = (global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Well_Played.Models.Item");
                xamlMember = new global::Well_Played.Well_Played_XamlTypeInfo.XamlMember(this, "requiredChampion", "String");
                xamlMember.Getter = get_88_Item_requiredChampion;
                xamlMember.Setter = set_88_Item_requiredChampion;
                break;
            case "Well_Played.Models.Item.rune":
                userType = (global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Well_Played.Models.Item");
                xamlMember = new global::Well_Played.Well_Played_XamlTypeInfo.XamlMember(this, "rune", "Well_Played.Models.MetaData");
                xamlMember.Getter = get_89_Item_rune;
                xamlMember.Setter = set_89_Item_rune;
                break;
            case "Well_Played.Models.Item.sanitizedDescription":
                userType = (global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Well_Played.Models.Item");
                xamlMember = new global::Well_Played.Well_Played_XamlTypeInfo.XamlMember(this, "sanitizedDescription", "String");
                xamlMember.Getter = get_90_Item_sanitizedDescription;
                xamlMember.Setter = set_90_Item_sanitizedDescription;
                break;
            case "Well_Played.Models.Item.specialRecipe":
                userType = (global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Well_Played.Models.Item");
                xamlMember = new global::Well_Played.Well_Played_XamlTypeInfo.XamlMember(this, "specialRecipe", "Int32");
                xamlMember.Getter = get_91_Item_specialRecipe;
                xamlMember.Setter = set_91_Item_specialRecipe;
                break;
            case "Well_Played.Models.Item.stacks":
                userType = (global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Well_Played.Models.Item");
                xamlMember = new global::Well_Played.Well_Played_XamlTypeInfo.XamlMember(this, "stacks", "Int32");
                xamlMember.Getter = get_92_Item_stacks;
                xamlMember.Setter = set_92_Item_stacks;
                break;
            case "Well_Played.Models.Item.stats":
                userType = (global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Well_Played.Models.Item");
                xamlMember = new global::Well_Played.Well_Played_XamlTypeInfo.XamlMember(this, "stats", "Well_Played.Models.BasicDataStats");
                xamlMember.Getter = get_93_Item_stats;
                xamlMember.Setter = set_93_Item_stats;
                break;
            case "Well_Played.Models.Item.tags":
                userType = (global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Well_Played.Models.Item");
                xamlMember = new global::Well_Played.Well_Played_XamlTypeInfo.XamlMember(this, "tags", "System.Collections.Generic.List`1<String>");
                xamlMember.Getter = get_94_Item_tags;
                xamlMember.Setter = set_94_Item_tags;
                break;
            case "Well_Played.Item.buildsFrom":
                userType = (global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Well_Played.Item");
                xamlMember = new global::Well_Played.Well_Played_XamlTypeInfo.XamlMember(this, "buildsFrom", "System.Collections.ObjectModel.ObservableCollection`1<Well_Played.Models.Item>");
                xamlMember.Getter = get_95_Item_buildsFrom;
                xamlMember.Setter = set_95_Item_buildsFrom;
                break;
            case "Well_Played.Items.LeagueItems":
                userType = (global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Well_Played.Items");
                xamlMember = new global::Well_Played.Well_Played_XamlTypeInfo.XamlMember(this, "LeagueItems", "System.Collections.ObjectModel.ObservableCollection`1<Well_Played.Models.Item>");
                xamlMember.Getter = get_96_Items_LeagueItems;
                xamlMember.Setter = set_96_Items_LeagueItems;
                break;
            case "Well_Played.Items.FullLeagueItems":
                userType = (global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Well_Played.Items");
                xamlMember = new global::Well_Played.Well_Played_XamlTypeInfo.XamlMember(this, "FullLeagueItems", "System.Collections.ObjectModel.ObservableCollection`1<Well_Played.Models.Item>");
                xamlMember.Getter = get_97_Items_FullLeagueItems;
                xamlMember.Setter = set_97_Items_FullLeagueItems;
                break;
            case "Well_Played.Items.ListOfItems":
                userType = (global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Well_Played.Items");
                xamlMember = new global::Well_Played.Well_Played_XamlTypeInfo.XamlMember(this, "ListOfItems", "Well_Played.Models.ItemList");
                xamlMember.Getter = get_98_Items_ListOfItems;
                xamlMember.Setter = set_98_Items_ListOfItems;
                break;
            case "Well_Played.Spells.SummonerSpells":
                userType = (global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Well_Played.Spells");
                xamlMember = new global::Well_Played.Well_Played_XamlTypeInfo.XamlMember(this, "SummonerSpells", "System.Collections.ObjectModel.ObservableCollection`1<Well_Played.Models.SummonerSpell>");
                xamlMember.Getter = get_99_Spells_SummonerSpells;
                xamlMember.Setter = set_99_Spells_SummonerSpells;
                break;
            case "Well_Played.Models.SummonerSpell.cooldown":
                userType = (global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Well_Played.Models.SummonerSpell");
                xamlMember = new global::Well_Played.Well_Played_XamlTypeInfo.XamlMember(this, "cooldown", "System.Collections.Generic.List`1<Double>");
                xamlMember.Getter = get_100_SummonerSpell_cooldown;
                xamlMember.Setter = set_100_SummonerSpell_cooldown;
                break;
            case "Well_Played.Models.SummonerSpell.cooldownBurn":
                userType = (global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Well_Played.Models.SummonerSpell");
                xamlMember = new global::Well_Played.Well_Played_XamlTypeInfo.XamlMember(this, "cooldownBurn", "String");
                xamlMember.Getter = get_101_SummonerSpell_cooldownBurn;
                xamlMember.Setter = set_101_SummonerSpell_cooldownBurn;
                break;
            case "Well_Played.Models.SummonerSpell.cost":
                userType = (global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Well_Played.Models.SummonerSpell");
                xamlMember = new global::Well_Played.Well_Played_XamlTypeInfo.XamlMember(this, "cost", "System.Collections.Generic.List`1<Int32>");
                xamlMember.Getter = get_102_SummonerSpell_cost;
                xamlMember.Setter = set_102_SummonerSpell_cost;
                break;
            case "Well_Played.Models.SummonerSpell.costBurn":
                userType = (global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Well_Played.Models.SummonerSpell");
                xamlMember = new global::Well_Played.Well_Played_XamlTypeInfo.XamlMember(this, "costBurn", "String");
                xamlMember.Getter = get_103_SummonerSpell_costBurn;
                xamlMember.Setter = set_103_SummonerSpell_costBurn;
                break;
            case "Well_Played.Models.SummonerSpell.costType":
                userType = (global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Well_Played.Models.SummonerSpell");
                xamlMember = new global::Well_Played.Well_Played_XamlTypeInfo.XamlMember(this, "costType", "String");
                xamlMember.Getter = get_104_SummonerSpell_costType;
                xamlMember.Setter = set_104_SummonerSpell_costType;
                break;
            case "Well_Played.Models.SummonerSpell.description":
                userType = (global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Well_Played.Models.SummonerSpell");
                xamlMember = new global::Well_Played.Well_Played_XamlTypeInfo.XamlMember(this, "description", "String");
                xamlMember.Getter = get_105_SummonerSpell_description;
                xamlMember.Setter = set_105_SummonerSpell_description;
                break;
            case "Well_Played.Models.SummonerSpell.effect":
                userType = (global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Well_Played.Models.SummonerSpell");
                xamlMember = new global::Well_Played.Well_Played_XamlTypeInfo.XamlMember(this, "effect", "System.Collections.Generic.List`1<Object>");
                xamlMember.Getter = get_106_SummonerSpell_effect;
                xamlMember.Setter = set_106_SummonerSpell_effect;
                break;
            case "Well_Played.Models.SummonerSpell.effectBurn":
                userType = (global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Well_Played.Models.SummonerSpell");
                xamlMember = new global::Well_Played.Well_Played_XamlTypeInfo.XamlMember(this, "effectBurn", "System.Collections.Generic.List`1<String>");
                xamlMember.Getter = get_107_SummonerSpell_effectBurn;
                xamlMember.Setter = set_107_SummonerSpell_effectBurn;
                break;
            case "Well_Played.Models.SummonerSpell.id":
                userType = (global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Well_Played.Models.SummonerSpell");
                xamlMember = new global::Well_Played.Well_Played_XamlTypeInfo.XamlMember(this, "id", "Int32");
                xamlMember.Getter = get_108_SummonerSpell_id;
                xamlMember.Setter = set_108_SummonerSpell_id;
                break;
            case "Well_Played.Models.SummonerSpell.image":
                userType = (global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Well_Played.Models.SummonerSpell");
                xamlMember = new global::Well_Played.Well_Played_XamlTypeInfo.XamlMember(this, "image", "Well_Played.Models.Image");
                xamlMember.Getter = get_109_SummonerSpell_image;
                xamlMember.Setter = set_109_SummonerSpell_image;
                break;
            case "Well_Played.Models.SummonerSpell.key":
                userType = (global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Well_Played.Models.SummonerSpell");
                xamlMember = new global::Well_Played.Well_Played_XamlTypeInfo.XamlMember(this, "key", "String");
                xamlMember.Getter = get_110_SummonerSpell_key;
                xamlMember.Setter = set_110_SummonerSpell_key;
                break;
            case "Well_Played.Models.SummonerSpell.leveltip":
                userType = (global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Well_Played.Models.SummonerSpell");
                xamlMember = new global::Well_Played.Well_Played_XamlTypeInfo.XamlMember(this, "leveltip", "Well_Played.Models.LevelTip");
                xamlMember.Getter = get_111_SummonerSpell_leveltip;
                xamlMember.Setter = set_111_SummonerSpell_leveltip;
                break;
            case "Well_Played.Models.SummonerSpell.maxrank":
                userType = (global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Well_Played.Models.SummonerSpell");
                xamlMember = new global::Well_Played.Well_Played_XamlTypeInfo.XamlMember(this, "maxrank", "Int32");
                xamlMember.Getter = get_112_SummonerSpell_maxrank;
                xamlMember.Setter = set_112_SummonerSpell_maxrank;
                break;
            case "Well_Played.Models.SummonerSpell.modes":
                userType = (global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Well_Played.Models.SummonerSpell");
                xamlMember = new global::Well_Played.Well_Played_XamlTypeInfo.XamlMember(this, "modes", "System.Collections.Generic.List`1<String>");
                xamlMember.Getter = get_113_SummonerSpell_modes;
                xamlMember.Setter = set_113_SummonerSpell_modes;
                break;
            case "Well_Played.Models.SummonerSpell.name":
                userType = (global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Well_Played.Models.SummonerSpell");
                xamlMember = new global::Well_Played.Well_Played_XamlTypeInfo.XamlMember(this, "name", "String");
                xamlMember.Getter = get_114_SummonerSpell_name;
                xamlMember.Setter = set_114_SummonerSpell_name;
                break;
            case "Well_Played.Models.SummonerSpell.range":
                userType = (global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Well_Played.Models.SummonerSpell");
                xamlMember = new global::Well_Played.Well_Played_XamlTypeInfo.XamlMember(this, "range", "Object");
                xamlMember.Getter = get_115_SummonerSpell_range;
                xamlMember.Setter = set_115_SummonerSpell_range;
                break;
            case "Well_Played.Models.SummonerSpell.rangeBurn":
                userType = (global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Well_Played.Models.SummonerSpell");
                xamlMember = new global::Well_Played.Well_Played_XamlTypeInfo.XamlMember(this, "rangeBurn", "String");
                xamlMember.Getter = get_116_SummonerSpell_rangeBurn;
                xamlMember.Setter = set_116_SummonerSpell_rangeBurn;
                break;
            case "Well_Played.Models.SummonerSpell.resource":
                userType = (global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Well_Played.Models.SummonerSpell");
                xamlMember = new global::Well_Played.Well_Played_XamlTypeInfo.XamlMember(this, "resource", "String");
                xamlMember.Getter = get_117_SummonerSpell_resource;
                xamlMember.Setter = set_117_SummonerSpell_resource;
                break;
            case "Well_Played.Models.SummonerSpell.sanitizedDescription":
                userType = (global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Well_Played.Models.SummonerSpell");
                xamlMember = new global::Well_Played.Well_Played_XamlTypeInfo.XamlMember(this, "sanitizedDescription", "String");
                xamlMember.Getter = get_118_SummonerSpell_sanitizedDescription;
                xamlMember.Setter = set_118_SummonerSpell_sanitizedDescription;
                break;
            case "Well_Played.Models.SummonerSpell.sanitizedTooltip":
                userType = (global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Well_Played.Models.SummonerSpell");
                xamlMember = new global::Well_Played.Well_Played_XamlTypeInfo.XamlMember(this, "sanitizedTooltip", "String");
                xamlMember.Getter = get_119_SummonerSpell_sanitizedTooltip;
                xamlMember.Setter = set_119_SummonerSpell_sanitizedTooltip;
                break;
            case "Well_Played.Models.SummonerSpell.summonerLevel":
                userType = (global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Well_Played.Models.SummonerSpell");
                xamlMember = new global::Well_Played.Well_Played_XamlTypeInfo.XamlMember(this, "summonerLevel", "Int32");
                xamlMember.Getter = get_120_SummonerSpell_summonerLevel;
                xamlMember.Setter = set_120_SummonerSpell_summonerLevel;
                break;
            case "Well_Played.Models.SummonerSpell.tooltip":
                userType = (global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Well_Played.Models.SummonerSpell");
                xamlMember = new global::Well_Played.Well_Played_XamlTypeInfo.XamlMember(this, "tooltip", "String");
                xamlMember.Getter = get_121_SummonerSpell_tooltip;
                xamlMember.Setter = set_121_SummonerSpell_tooltip;
                break;
            case "Well_Played.Models.SummonerSpell.vars":
                userType = (global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Well_Played.Models.SummonerSpell");
                xamlMember = new global::Well_Played.Well_Played_XamlTypeInfo.XamlMember(this, "vars", "System.Collections.Generic.List`1<Well_Played.Models.SpellVars>");
                xamlMember.Getter = get_122_SummonerSpell_vars;
                xamlMember.Setter = set_122_SummonerSpell_vars;
                break;
            case "Well_Played.Spells.ListOfPartialSpells":
                userType = (global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Well_Played.Spells");
                xamlMember = new global::Well_Played.Well_Played_XamlTypeInfo.XamlMember(this, "ListOfPartialSpells", "Well_Played.Models.SpellList");
                xamlMember.Getter = get_123_Spells_ListOfPartialSpells;
                xamlMember.Setter = set_123_Spells_ListOfPartialSpells;
                break;
            case "Well_Played.Summoner.MostPlayedChampions":
                userType = (global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Well_Played.Summoner");
                xamlMember = new global::Well_Played.Well_Played_XamlTypeInfo.XamlMember(this, "MostPlayedChampions", "System.Collections.ObjectModel.ObservableCollection`1<Well_Played.Models.Champion>");
                xamlMember.Getter = get_124_Summoner_MostPlayedChampions;
                xamlMember.Setter = set_124_Summoner_MostPlayedChampions;
                break;
            case "Well_Played.Summoner.SummonerMatches":
                userType = (global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Well_Played.Summoner");
                xamlMember = new global::Well_Played.Well_Played_XamlTypeInfo.XamlMember(this, "SummonerMatches", "System.Collections.ObjectModel.ObservableCollection`1<Well_Played.Models.Game>");
                xamlMember.Getter = get_125_Summoner_SummonerMatches;
                xamlMember.Setter = set_125_Summoner_SummonerMatches;
                break;
            case "Well_Played.Models.Game.championId":
                userType = (global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Well_Played.Models.Game");
                xamlMember = new global::Well_Played.Well_Played_XamlTypeInfo.XamlMember(this, "championId", "Int32");
                xamlMember.Getter = get_126_Game_championId;
                xamlMember.Setter = set_126_Game_championId;
                break;
            case "Well_Played.Models.Game.createDate":
                userType = (global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Well_Played.Models.Game");
                xamlMember = new global::Well_Played.Well_Played_XamlTypeInfo.XamlMember(this, "createDate", "Int64");
                xamlMember.Getter = get_127_Game_createDate;
                xamlMember.Setter = set_127_Game_createDate;
                break;
            case "Well_Played.Models.Game.fellowPlayers":
                userType = (global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Well_Played.Models.Game");
                xamlMember = new global::Well_Played.Well_Played_XamlTypeInfo.XamlMember(this, "fellowPlayers", "System.Collections.Generic.List`1<Well_Played.Models.Player>");
                xamlMember.Getter = get_128_Game_fellowPlayers;
                xamlMember.Setter = set_128_Game_fellowPlayers;
                break;
            case "Well_Played.Models.Player.championId":
                userType = (global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Well_Played.Models.Player");
                xamlMember = new global::Well_Played.Well_Played_XamlTypeInfo.XamlMember(this, "championId", "Int32");
                xamlMember.Getter = get_129_Player_championId;
                xamlMember.Setter = set_129_Player_championId;
                break;
            case "Well_Played.Models.Player.summonerId":
                userType = (global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Well_Played.Models.Player");
                xamlMember = new global::Well_Played.Well_Played_XamlTypeInfo.XamlMember(this, "summonerId", "Int64");
                xamlMember.Getter = get_130_Player_summonerId;
                xamlMember.Setter = set_130_Player_summonerId;
                break;
            case "Well_Played.Models.Player.teamId":
                userType = (global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Well_Played.Models.Player");
                xamlMember = new global::Well_Played.Well_Played_XamlTypeInfo.XamlMember(this, "teamId", "Int32");
                xamlMember.Getter = get_131_Player_teamId;
                xamlMember.Setter = set_131_Player_teamId;
                break;
            case "Well_Played.Models.Game.gameId":
                userType = (global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Well_Played.Models.Game");
                xamlMember = new global::Well_Played.Well_Played_XamlTypeInfo.XamlMember(this, "gameId", "Int64");
                xamlMember.Getter = get_132_Game_gameId;
                xamlMember.Setter = set_132_Game_gameId;
                break;
            case "Well_Played.Models.Game.gameMode":
                userType = (global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Well_Played.Models.Game");
                xamlMember = new global::Well_Played.Well_Played_XamlTypeInfo.XamlMember(this, "gameMode", "String");
                xamlMember.Getter = get_133_Game_gameMode;
                xamlMember.Setter = set_133_Game_gameMode;
                break;
            case "Well_Played.Models.Game.gameType":
                userType = (global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Well_Played.Models.Game");
                xamlMember = new global::Well_Played.Well_Played_XamlTypeInfo.XamlMember(this, "gameType", "String");
                xamlMember.Getter = get_134_Game_gameType;
                xamlMember.Setter = set_134_Game_gameType;
                break;
            case "Well_Played.Models.Game.invalid":
                userType = (global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Well_Played.Models.Game");
                xamlMember = new global::Well_Played.Well_Played_XamlTypeInfo.XamlMember(this, "invalid", "Boolean");
                xamlMember.Getter = get_135_Game_invalid;
                xamlMember.Setter = set_135_Game_invalid;
                break;
            case "Well_Played.Models.Game.ipEarned":
                userType = (global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Well_Played.Models.Game");
                xamlMember = new global::Well_Played.Well_Played_XamlTypeInfo.XamlMember(this, "ipEarned", "Int32");
                xamlMember.Getter = get_136_Game_ipEarned;
                xamlMember.Setter = set_136_Game_ipEarned;
                break;
            case "Well_Played.Models.Game.level":
                userType = (global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Well_Played.Models.Game");
                xamlMember = new global::Well_Played.Well_Played_XamlTypeInfo.XamlMember(this, "level", "Int32");
                xamlMember.Getter = get_137_Game_level;
                xamlMember.Setter = set_137_Game_level;
                break;
            case "Well_Played.Models.Game.mapId":
                userType = (global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Well_Played.Models.Game");
                xamlMember = new global::Well_Played.Well_Played_XamlTypeInfo.XamlMember(this, "mapId", "Int32");
                xamlMember.Getter = get_138_Game_mapId;
                xamlMember.Setter = set_138_Game_mapId;
                break;
            case "Well_Played.Models.Game.spell1":
                userType = (global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Well_Played.Models.Game");
                xamlMember = new global::Well_Played.Well_Played_XamlTypeInfo.XamlMember(this, "spell1", "Int32");
                xamlMember.Getter = get_139_Game_spell1;
                xamlMember.Setter = set_139_Game_spell1;
                break;
            case "Well_Played.Models.Game.spell2":
                userType = (global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Well_Played.Models.Game");
                xamlMember = new global::Well_Played.Well_Played_XamlTypeInfo.XamlMember(this, "spell2", "Int32");
                xamlMember.Getter = get_140_Game_spell2;
                xamlMember.Setter = set_140_Game_spell2;
                break;
            case "Well_Played.Models.Game.stats":
                userType = (global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Well_Played.Models.Game");
                xamlMember = new global::Well_Played.Well_Played_XamlTypeInfo.XamlMember(this, "stats", "Well_Played.Models.RawStats");
                xamlMember.Getter = get_141_Game_stats;
                xamlMember.Setter = set_141_Game_stats;
                break;
            case "Well_Played.Models.Game.subType":
                userType = (global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Well_Played.Models.Game");
                xamlMember = new global::Well_Played.Well_Played_XamlTypeInfo.XamlMember(this, "subType", "String");
                xamlMember.Getter = get_142_Game_subType;
                xamlMember.Setter = set_142_Game_subType;
                break;
            case "Well_Played.Models.Game.teamId":
                userType = (global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Well_Played.Models.Game");
                xamlMember = new global::Well_Played.Well_Played_XamlTypeInfo.XamlMember(this, "teamId", "Int32");
                xamlMember.Getter = get_143_Game_teamId;
                xamlMember.Setter = set_143_Game_teamId;
                break;
            case "Well_Played.Models.Game.win":
                userType = (global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Well_Played.Models.Game");
                xamlMember = new global::Well_Played.Well_Played_XamlTypeInfo.XamlMember(this, "win", "String");
                xamlMember.Getter = get_144_Game_win;
                xamlMember.Setter = set_144_Game_win;
                break;
            case "Well_Played.Models.Game.color":
                userType = (global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Well_Played.Models.Game");
                xamlMember = new global::Well_Played.Well_Played_XamlTypeInfo.XamlMember(this, "color", "String");
                xamlMember.Getter = get_145_Game_color;
                xamlMember.Setter = set_145_Game_color;
                break;
            case "Well_Played.Models.Game.thumbnail":
                userType = (global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Well_Played.Models.Game");
                xamlMember = new global::Well_Played.Well_Played_XamlTypeInfo.XamlMember(this, "thumbnail", "String");
                xamlMember.Getter = get_146_Game_thumbnail;
                xamlMember.Setter = set_146_Game_thumbnail;
                break;
            case "Well_Played.Models.Game.gameDate":
                userType = (global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Well_Played.Models.Game");
                xamlMember = new global::Well_Played.Well_Played_XamlTypeInfo.XamlMember(this, "gameDate", "System.DateTime");
                xamlMember.Getter = get_147_Game_gameDate;
                xamlMember.Setter = set_147_Game_gameDate;
                break;
            case "Well_Played.Summoner.ListOfMatches":
                userType = (global::Well_Played.Well_Played_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Well_Played.Summoner");
                xamlMember = new global::Well_Played.Well_Played_XamlTypeInfo.XamlMember(this, "ListOfMatches", "Well_Played.Models.MatchList");
                xamlMember.Getter = get_148_Summoner_ListOfMatches;
                xamlMember.Setter = set_148_Summoner_ListOfMatches;
                break;
            }
            return xamlMember;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlSystemBaseType : global::Windows.UI.Xaml.Markup.IXamlType
    {
        string _fullName;
        global::System.Type _underlyingType;

        public XamlSystemBaseType(string fullName, global::System.Type underlyingType)
        {
            _fullName = fullName;
            _underlyingType = underlyingType;
        }

        public string FullName { get { return _fullName; } }

        public global::System.Type UnderlyingType
        {
            get
            {
                return _underlyingType;
            }
        }

        virtual public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name) { throw new global::System.NotImplementedException(); }
        virtual public bool IsArray { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsCollection { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsConstructible { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsDictionary { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsMarkupExtension { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsBindable { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsReturnTypeStub { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsLocalType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType ItemType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType KeyType { get { throw new global::System.NotImplementedException(); } }
        virtual public object ActivateInstance() { throw new global::System.NotImplementedException(); }
        virtual public void AddToMap(object instance, object key, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void AddToVector(object instance, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void RunInitializer()   { throw new global::System.NotImplementedException(); }
        virtual public object CreateFromString(string input)   { throw new global::System.NotImplementedException(); }
    }
    
    internal delegate object Activator();
    internal delegate void AddToCollection(object instance, object item);
    internal delegate void AddToDictionary(object instance, object key, object item);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlUserType : global::Well_Played.Well_Played_XamlTypeInfo.XamlSystemBaseType
    {
        global::Well_Played.Well_Played_XamlTypeInfo.XamlTypeInfoProvider _provider;
        global::Windows.UI.Xaml.Markup.IXamlType _baseType;
        bool _isArray;
        bool _isMarkupExtension;
        bool _isBindable;
        bool _isReturnTypeStub;
        bool _isLocalType;

        string _contentPropertyName;
        string _itemTypeName;
        string _keyTypeName;
        global::System.Collections.Generic.Dictionary<string, string> _memberNames;
        global::System.Collections.Generic.Dictionary<string, object> _enumValues;

        public XamlUserType(global::Well_Played.Well_Played_XamlTypeInfo.XamlTypeInfoProvider provider, string fullName, global::System.Type fullType, global::Windows.UI.Xaml.Markup.IXamlType baseType)
            :base(fullName, fullType)
        {
            _provider = provider;
            _baseType = baseType;
        }

        // --- Interface methods ----

        override public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { return _baseType; } }
        override public bool IsArray { get { return _isArray; } }
        override public bool IsCollection { get { return (CollectionAdd != null); } }
        override public bool IsConstructible { get { return (Activator != null); } }
        override public bool IsDictionary { get { return (DictionaryAdd != null); } }
        override public bool IsMarkupExtension { get { return _isMarkupExtension; } }
        override public bool IsBindable { get { return _isBindable; } }
        override public bool IsReturnTypeStub { get { return _isReturnTypeStub; } }
        override public bool IsLocalType { get { return _isLocalType; } }

        override public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty
        {
            get { return _provider.GetMemberByLongName(_contentPropertyName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType ItemType
        {
            get { return _provider.GetXamlTypeByName(_itemTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType KeyType
        {
            get { return _provider.GetXamlTypeByName(_keyTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name)
        {
            if (_memberNames == null)
            {
                return null;
            }
            string longName;
            if (_memberNames.TryGetValue(name, out longName))
            {
                return _provider.GetMemberByLongName(longName);
            }
            return null;
        }

        override public object ActivateInstance()
        {
            return Activator(); 
        }

        override public void AddToMap(object instance, object key, object item) 
        {
            DictionaryAdd(instance, key, item);
        }

        override public void AddToVector(object instance, object item)
        {
            CollectionAdd(instance, item);
        }

        override public void RunInitializer() 
        {
            System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(UnderlyingType.TypeHandle);
        }

        override public object CreateFromString(string input)
        {
            if (_enumValues != null)
            {
                int value = 0;

                string[] valueParts = input.Split(',');

                foreach (string valuePart in valueParts) 
                {
                    object partValue;
                    int enumFieldValue = 0;
                    try
                    {
                        if (_enumValues.TryGetValue(valuePart.Trim(), out partValue))
                        {
                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                        }
                        else
                        {
                            try
                            {
                                enumFieldValue = global::System.Convert.ToInt32(valuePart.Trim());
                            }
                            catch( global::System.FormatException )
                            {
                                foreach( string key in _enumValues.Keys )
                                {
                                    if( string.Compare(valuePart.Trim(), key, global::System.StringComparison.OrdinalIgnoreCase) == 0 )
                                    {
                                        if( _enumValues.TryGetValue(key.Trim(), out partValue) )
                                        {
                                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        value |= enumFieldValue; 
                    }
                    catch( global::System.FormatException )
                    {
                        throw new global::System.ArgumentException(input, FullName);
                    }
                }

                return value; 
            }
            throw new global::System.ArgumentException(input, FullName);
        }

        // --- End of Interface methods

        public Activator Activator { get; set; }
        public AddToCollection CollectionAdd { get; set; }
        public AddToDictionary DictionaryAdd { get; set; }

        public void SetContentPropertyName(string contentPropertyName)
        {
            _contentPropertyName = contentPropertyName;
        }

        public void SetIsArray()
        {
            _isArray = true; 
        }

        public void SetIsMarkupExtension()
        {
            _isMarkupExtension = true;
        }

        public void SetIsBindable()
        {
            _isBindable = true;
        }

        public void SetIsReturnTypeStub()
        {
            _isReturnTypeStub = true;
        }

        public void SetIsLocalType()
        {
            _isLocalType = true;
        }

        public void SetItemTypeName(string itemTypeName)
        {
            _itemTypeName = itemTypeName;
        }

        public void SetKeyTypeName(string keyTypeName)
        {
            _keyTypeName = keyTypeName;
        }

        public void AddMemberName(string shortName)
        {
            if(_memberNames == null)
            {
                _memberNames =  new global::System.Collections.Generic.Dictionary<string,string>();
            }
            _memberNames.Add(shortName, FullName + "." + shortName);
        }

        public void AddEnumValue(string name, object value)
        {
            if (_enumValues == null)
            {
                _enumValues = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            _enumValues.Add(name, value);
        }
    }

    internal delegate object Getter(object instance);
    internal delegate void Setter(object instance, object value);

    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks"," 14.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlMember : global::Windows.UI.Xaml.Markup.IXamlMember
    {
        global::Well_Played.Well_Played_XamlTypeInfo.XamlTypeInfoProvider _provider;
        string _name;
        bool _isAttachable;
        bool _isDependencyProperty;
        bool _isReadOnly;

        string _typeName;
        string _targetTypeName;

        public XamlMember(global::Well_Played.Well_Played_XamlTypeInfo.XamlTypeInfoProvider provider, string name, string typeName)
        {
            _name = name;
            _typeName = typeName;
            _provider = provider;
        }

        public string Name { get { return _name; } }

        public global::Windows.UI.Xaml.Markup.IXamlType Type
        {
            get { return _provider.GetXamlTypeByName(_typeName); }
        }

        public void SetTargetTypeName(string targetTypeName)
        {
            _targetTypeName = targetTypeName;
        }
        public global::Windows.UI.Xaml.Markup.IXamlType TargetType
        {
            get { return _provider.GetXamlTypeByName(_targetTypeName); }
        }

        public void SetIsAttachable() { _isAttachable = true; }
        public bool IsAttachable { get { return _isAttachable; } }

        public void SetIsDependencyProperty() { _isDependencyProperty = true; }
        public bool IsDependencyProperty { get { return _isDependencyProperty; } }

        public void SetIsReadOnly() { _isReadOnly = true; }
        public bool IsReadOnly { get { return _isReadOnly; } }

        public Getter Getter { get; set; }
        public object GetValue(object instance)
        {
            if (Getter != null)
                return Getter(instance);
            else
                throw new global::System.InvalidOperationException("GetValue");
        }

        public Setter Setter { get; set; }
        public void SetValue(object instance, object value)
        {
            if (Setter != null)
                Setter(instance, value);
            else
                throw new global::System.InvalidOperationException("SetValue");
        }
    }
}

